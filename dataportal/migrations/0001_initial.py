# Generated by Django 5.0.7 on 2024-09-10 12:38

import django.contrib.postgres.indexes
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Species",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("scientific_name", models.CharField(db_index=True, max_length=255)),
                (
                    "common_name",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("acronym", models.CharField(blank=True, max_length=10, null=True)),
                ("taxonomy_id", models.IntegerField(unique=True)),
            ],
            options={
                "db_table": "species",
                "indexes": [
                    django.contrib.postgres.indexes.GinIndex(
                        fields=["scientific_name"],
                        name="species_sci_name_gin_idx",
                        opclasses=["gin_trgm_ops"],
                    )
                ],
            },
        ),
        migrations.CreateModel(
            name="Strain",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("isolate_name", models.CharField(max_length=255)),
                (
                    "assembly_name",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "assembly_accession",
                    models.CharField(blank=True, max_length=20, null=True, unique=True),
                ),
                ("fasta_file", models.CharField(max_length=255)),
                ("gff_file", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "species",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="strains",
                        to="dataportal.species",
                    ),
                ),
            ],
            options={
                "db_table": "strain",
            },
        ),
        migrations.CreateModel(
            name="Gene",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                (
                    "gene_name",
                    models.CharField(
                        blank=True, db_index=True, max_length=255, null=True
                    ),
                ),
                (
                    "locus_tag",
                    models.CharField(db_index=True, max_length=255, unique=True),
                ),
                ("description", models.TextField(blank=True, null=True)),
                ("annotations", models.JSONField(blank=True, null=True)),
                (
                    "strain",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="genes",
                        to="dataportal.strain",
                    ),
                ),
            ],
            options={
                "db_table": "gene",
            },
        ),
        migrations.CreateModel(
            name="CrossReferences",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("db_name", models.CharField(max_length=255)),
                ("db_accession", models.CharField(max_length=255)),
                ("db_description", models.TextField()),
                (
                    "gene",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="cross_references",
                        to="dataportal.gene",
                    ),
                ),
            ],
            options={
                "db_table": "cross_references",
                "indexes": [
                    django.contrib.postgres.indexes.GinIndex(
                        fields=["db_name", "db_accession", "db_description"],
                        name="cross_refs_db_acc_desc_gin_idx",
                        opclasses=["gin_trgm_ops", "gin_trgm_ops", "gin_trgm_ops"],
                    )
                ],
            },
        ),
        migrations.CreateModel(
            name="GeneOntologyTerm",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("ontology_type", models.CharField(max_length=50)),
                ("ontology_id", models.CharField(max_length=255)),
                ("ontology_description", models.TextField(blank=True, null=True)),
                (
                    "gene",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="ontology_terms",
                        to="dataportal.gene",
                    ),
                ),
            ],
            options={
                "db_table": "gene_ontology_term",
                "indexes": [
                    django.contrib.postgres.indexes.GinIndex(
                        fields=["ontology_id", "ontology_description"],
                        name="go_term_id_desc_gin_idx",
                        opclasses=["gin_trgm_ops", "gin_trgm_ops"],
                    )
                ],
            },
        ),
        migrations.CreateModel(
            name="ReferenceGeneDescription",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("reference_source", models.CharField(max_length=255)),
                ("description", models.TextField()),
                (
                    "gene",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="reference_descriptions",
                        to="dataportal.gene",
                    ),
                ),
            ],
            options={
                "db_table": "reference_gene_description",
                "indexes": [
                    django.contrib.postgres.indexes.GinIndex(
                        fields=["reference_source", "description"],
                        name="ref_gene_src_desc_gin_idx",
                        opclasses=["gin_trgm_ops", "gin_trgm_ops"],
                    )
                ],
            },
        ),
        migrations.AddIndex(
            model_name="strain",
            index=django.contrib.postgres.indexes.GinIndex(
                fields=["isolate_name"],
                name="isolate_name_gin_idx",
                opclasses=["gin_trgm_ops"],
            ),
        ),
        migrations.AddIndex(
            model_name="gene",
            index=django.contrib.postgres.indexes.GinIndex(
                fields=["gene_name"],
                name="gene_name_gin_idx",
                opclasses=["gin_trgm_ops"],
            ),
        ),
        migrations.AddIndex(
            model_name="gene",
            index=django.contrib.postgres.indexes.GinIndex(
                fields=["locus_tag"],
                name="locus_tag_gin_idx",
                opclasses=["gin_trgm_ops"],
            ),
        ),
        migrations.AddIndex(
            model_name="gene",
            index=django.contrib.postgres.indexes.GinIndex(
                fields=["annotations"],
                name="gene_annotations_gin_idx",
                opclasses=["jsonb_path_ops"],
            ),
        ),
        migrations.AddConstraint(
            model_name="gene",
            constraint=models.UniqueConstraint(
                fields=("locus_tag",), name="unique_locus_tag"
            ),
        ),
    ]
