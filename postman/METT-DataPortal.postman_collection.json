{
	"info": {
		"_postman_id": "8b555c56-1b63-4a3c-a302-06921a6e5a8d",
		"name": "METT-DataPortal",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "19420352"
	},
	"item": [
		{
			"name": "ME TT - API Integration Tests",
			"item": [
				{
					"name": "Health",
					"item": [
						{
							"name": "App-Health-Check",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Health is Ok\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"ok\")",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mett-current}}/api/health",
									"host": [
										"{{mett-current}}"
									],
									"path": [
										"api",
										"health"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "species",
					"item": [
						{
							"name": "Species-List-Positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Array length is greater than or equal to 2\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.be.at.least(2); ",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mett-current}}/api/species/",
									"host": [
										"{{mett-current}}"
									],
									"path": [
										"api",
										"species",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "genomes",
					"item": [
						{
							"name": "Autocomplete-genomes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Array length is equal to 5\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(5); ",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{mett-current}}/api/genomes/autocomplete?query=bu&limit=5",
									"host": [
										"{{mett-current}}"
									],
									"path": [
										"api",
										"genomes",
										"autocomplete"
									],
									"query": [
										{
											"key": "query",
											"value": "bu"
										},
										{
											"key": "limit",
											"value": "5"
										}
									]
								},
								"description": "Generated from cURL: curl -X GET \"http://localhost:8000/api/search/autocomplete/?query=Bacteroides&limit=5\"\n"
							},
							"response": []
						},
						{
							"name": "Autocomplete-with-Filter-species",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Array length is equal to 5\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(5); ",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mett-current}}/api/genomes/autocomplete?query=bu&species_acronym=bu&limit=5",
									"host": [
										"{{mett-current}}"
									],
									"path": [
										"api",
										"genomes",
										"autocomplete"
									],
									"query": [
										{
											"key": "query",
											"value": "bu"
										},
										{
											"key": "species_acronym",
											"value": "bu"
										},
										{
											"key": "limit",
											"value": "5"
										}
									]
								},
								"description": "Generated from cURL: curl -X GET \"http://localhost:8000/api/search/autocomplete/?query=Bacteroides&limit=5\"\n"
							},
							"response": []
						},
						{
							"name": "Genome-by-genome-Name-positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Name matches expected value\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].species_scientific_name).contain(\"Bacteroides\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mett-current}}/api/genomes/by-isolate-names?isolates=BU_909",
									"host": [
										"{{mett-current}}"
									],
									"path": [
										"api",
										"genomes",
										"by-isolate-names"
									],
									"query": [
										{
											"key": "isolates",
											"value": "BU_909"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Genome-by-genome-Name-negative",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mett-current}}/api/genomes/strain/CU_909",
									"host": [
										"{{mett-current}}"
									],
									"path": [
										"api",
										"genomes",
										"strain",
										"CU_909"
									]
								}
							},
							"response": []
						},
						{
							"name": "Genome-multple-by-isolate-names-positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Name matches expected value\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].species_scientific_name).contain(\"Bacteroides\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{mett-current}}/api/genomes/by-isolate-names?isolates=BU_ATCC8492,PV_ATCC8482",
									"host": [
										"{{mett-current}}"
									],
									"path": [
										"api",
										"genomes",
										"by-isolate-names"
									],
									"query": [
										{
											"key": "isolates",
											"value": "BU_ATCC8492,PV_ATCC8482"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Genome-multple-by-isolate-names-single-positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Name matches expected value\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].species_scientific_name).contain(\"Bacteroides\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{mett-current}}/api/genomes/by-isolate-names?isolates=BU_ATCC8492",
									"host": [
										"{{mett-current}}"
									],
									"path": [
										"api",
										"genomes",
										"by-isolate-names"
									],
									"query": [
										{
											"key": "isolates",
											"value": "BU_ATCC8492"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Genomes-All-positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Number of pages matches expected value\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.num_pages).to.be.at.least(10);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mett-current}}/api/genomes/?page=1&per_page=5",
									"host": [
										"{{mett-current}}"
									],
									"path": [
										"api",
										"genomes",
										""
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "per_page",
											"value": "5"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Genomes-All-TypeStrains",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const response = pm.response.json();",
											"",
											"pm.test(\"At least one type strain is returned\", function () {",
											"    pm.expect(response).to.be.an(\"array\").that.is.not.empty;",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mett-current}}/api/genomes/type-strains",
									"host": [
										"{{mett-current}}"
									],
									"path": [
										"api",
										"genomes",
										"type-strains"
									]
								}
							},
							"response": []
						},
						{
							"name": "Genomes-All-negative",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Results array is empty\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.results).to.be.an('array').that.is.empty;",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mett-current}}/api/genomes/?page=-1&per_page=-1",
									"host": [
										"{{mett-current}}"
									],
									"path": [
										"api",
										"genomes",
										""
									],
									"query": [
										{
											"key": "page",
											"value": "-1"
										},
										{
											"key": "per_page",
											"value": "-1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Genomes-by-GenomeString-positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Number of pages matches expected value\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.results).to.be.an('array').length(1)",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mett-current}}/api/genomes/search?query=PV_H4",
									"host": [
										"{{mett-current}}"
									],
									"path": [
										"api",
										"genomes",
										"search"
									],
									"query": [
										{
											"key": "query",
											"value": "PV_H4"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Genomes-by-iso-species-query",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Number of pages matches expected value\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.results).to.be.an('array').length(1)",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mett-current}}/api/genomes/search?query=90&isolates=BU_909&species_acronym=BU",
									"host": [
										"{{mett-current}}"
									],
									"path": [
										"api",
										"genomes",
										"search"
									],
									"query": [
										{
											"key": "query",
											"value": "90"
										},
										{
											"key": "isolates",
											"value": "BU_909"
										},
										{
											"key": "species_acronym",
											"value": "BU"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Genomes-by-GenomeString-negative",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Results array is empty\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.results).to.be.an('array').that.is.empty;",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mett-current}}/api/genomes/search?query=xxx",
									"host": [
										"{{mett-current}}"
									],
									"path": [
										"api",
										"genomes",
										"search"
									],
									"query": [
										{
											"key": "query",
											"value": "xxx"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Genomes-by-GenomeString-all-blank",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Number of pages matches expected value\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.num_pages).to.be.at.least(5);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mett-current}}/api/genomes/search?query=&sortField=species&sortOrder=asc",
									"host": [
										"{{mett-current}}"
									],
									"path": [
										"api",
										"genomes",
										"search"
									],
									"query": [
										{
											"key": "query",
											"value": ""
										},
										{
											"key": "sortField",
											"value": "species"
										},
										{
											"key": "sortOrder",
											"value": "asc"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Genomes-by-SpeciesAcronym-positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Number of pages matches expected value\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.num_pages).to.be.at.least(3);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mett-current}}/api/species/bu/genomes",
									"host": [
										"{{mett-current}}"
									],
									"path": [
										"api",
										"species",
										"bu",
										"genomes"
									]
								}
							},
							"response": []
						},
						{
							"name": "Genomes-by-SpeciesAcronym-negative",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Results array is empty\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.results).to.be.an('array').that.is.empty;",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mett-current}}/api/species/abc/genomes",
									"host": [
										"{{mett-current}}"
									],
									"path": [
										"api",
										"species",
										"abc",
										"genomes"
									]
								}
							},
							"response": []
						},
						{
							"name": "Genomes-by-SpeciesScronym-GenomeString-positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Number of pages matches expected value\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.num_pages).to.be.at.least(3);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mett-current}}/api/species/pv/genomes/search?query=pv&page=3",
									"host": [
										"{{mett-current}}"
									],
									"path": [
										"api",
										"species",
										"pv",
										"genomes",
										"search"
									],
									"query": [
										{
											"key": "query",
											"value": "pv"
										},
										{
											"key": "page",
											"value": "3"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Genomes-by-SpeciesAcronym-GenomeString-negative-01",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Results array is empty\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.results).to.be.an('array').that.is.empty;",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mett-current}}/api/species/1/genomes/search?query=pv",
									"host": [
										"{{mett-current}}"
									],
									"path": [
										"api",
										"species",
										"1",
										"genomes",
										"search"
									],
									"query": [
										{
											"key": "query",
											"value": "pv"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Genomes-by-SpeciesAcronym-GenomeString-negative-02",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Results array is empty\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.results).to.be.an('array').that.is.empty;",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mett-current}}/api/species/abc/genomes/search?query=pv",
									"host": [
										"{{mett-current}}"
									],
									"path": [
										"api",
										"species",
										"abc",
										"genomes",
										"search"
									],
									"query": [
										{
											"key": "query",
											"value": "pv"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Essentiality-By-TypeStrain_BU-Positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Extract the response JSON",
											"let response = pm.response.json();",
											"",
											"// Check if the locus_tag \"BU_ATCC8492_00001\" exists",
											"let geneData = Object.values(response).find(item => item.locus_tag === \"BU_ATCC8492_00001\");",
											"",
											"pm.test(\"Check if locus_tag BU_ATCC8492_00001 has essentiality as 'essential'\", function () {",
											"    // Ensure the gene data is found",
											"    pm.expect(geneData).to.not.be.undefined;",
											"",
											"    // Check if any essentiality_data entry has \"essential\" as the essentiality value",
											"    let isEssential = geneData.essentiality === \"essential\";",
											"",
											"    // Validate the test",
											"    pm.expect(isEssential).to.be.true;",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mett-current}}/api/genomes/BU_ATCC8492/essentiality/contig_1",
									"host": [
										"{{mett-current}}"
									],
									"path": [
										"api",
										"genomes",
										"BU_ATCC8492",
										"essentiality",
										"contig_1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Essentiality-By-TypeStrain_PV-Positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Extract the response JSON",
											"let response = pm.response.json();",
											"",
											"// Check if the locus_tag \"PV_ATCC8482_00001\" exists",
											"let geneData = Object.values(response).find(item => item.locus_tag === \"PV_ATCC8482_00001\");",
											"",
											"pm.test(\"Check if locus_tag PV_ATCC8482_00001 has essentiality as 'essential'\", function () {",
											"    // Ensure the gene data is found",
											"    pm.expect(geneData).to.not.be.undefined;",
											"",
											"    // Check if any essentiality_data entry has \"essential\" as the essentiality value",
											"    let isEssential = geneData.essentiality === \"essential\";",
											"",
											"    // Validate the test",
											"    pm.expect(isEssential).to.be.true;",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mett-current}}/api/genomes/PV_ATCC8482/essentiality/contig_1",
									"host": [
										"{{mett-current}}"
									],
									"path": [
										"api",
										"genomes",
										"PV_ATCC8482",
										"essentiality",
										"contig_1"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "genes",
					"item": [
						{
							"name": "Gene-Faceted-Search-pfam",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response has expected structure\", function () {",
											"    const json = pm.response.json();",
											"    pm.expect(json).to.have.property(\"pfam\");",
											"    pm.expect(json).to.have.property(\"interpro\");",
											"    pm.expect(json).to.have.property(\"kegg\");",
											"    pm.expect(json).to.have.property(\"cog_id\");",
											"    pm.expect(json).to.have.property(\"cog_funcats\");",
											"    pm.expect(json).to.have.property(\"essentiality\");",
											"    pm.expect(json).to.have.property(\"has_amr_info\");",
											"    pm.expect(json).to.have.property(\"total_hits\");",
											"    pm.expect(json).to.have.property(\"operators\");",
											"});",
											"",
											"pm.test(\"Selected pfam filter is correctly marked\", function () {",
											"    const pfam = pm.response.json().pfam;",
											"    const selectedPfam = pfam.find(item => item.value === \"pf13715\");",
											"    pm.expect(selectedPfam).to.not.be.undefined;",
											"    pm.expect(selectedPfam.selected).to.eql(true);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mett-current}}/api/genes/faceted-search?species_acronym=BU&limit=10&pfam=pf13715",
									"host": [
										"{{mett-current}}"
									],
									"path": [
										"api",
										"genes",
										"faceted-search"
									],
									"query": [
										{
											"key": "species_acronym",
											"value": "BU"
										},
										{
											"key": "limit",
											"value": "10"
										},
										{
											"key": "pfam",
											"value": "pf13715"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Gene-Faceted-Search-Interpro-pfam",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response has expected structure\", function () {",
											"    const json = pm.response.json();",
											"    pm.expect(json).to.have.property(\"pfam\");",
											"    pm.expect(json).to.have.property(\"interpro\");",
											"    pm.expect(json).to.have.property(\"kegg\");",
											"    pm.expect(json).to.have.property(\"cog_id\");",
											"    pm.expect(json).to.have.property(\"cog_funcats\");",
											"    pm.expect(json).to.have.property(\"essentiality\");",
											"    pm.expect(json).to.have.property(\"has_amr_info\");",
											"    pm.expect(json).to.have.property(\"total_hits\");",
											"    pm.expect(json).to.have.property(\"operators\");",
											"});",
											"",
											"pm.test(\"Selected pfam and interpro filters are correctly marked\", function () {",
											"    const json = pm.response.json();",
											"",
											"    const selectedPfam = json.pfam.find(item => item.value === \"pf00294\");",
											"    const selectedInterpro = json.interpro.find(item => item.value === \"ipr011611\");",
											"",
											"    pm.expect(selectedPfam).to.not.be.undefined;",
											"    pm.expect(selectedPfam.selected).to.eql(true);",
											"",
											"    pm.expect(selectedInterpro).to.not.be.undefined;",
											"    pm.expect(selectedInterpro.selected).to.eql(true);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mett-current}}/api/genes/faceted-search?species_acronym=BU&limit=5&interpro=ipr011611&pfam=pf00294",
									"host": [
										"{{mett-current}}"
									],
									"path": [
										"api",
										"genes",
										"faceted-search"
									],
									"query": [
										{
											"key": "species_acronym",
											"value": "BU"
										},
										{
											"key": "limit",
											"value": "5"
										},
										{
											"key": "interpro",
											"value": "ipr011611"
										},
										{
											"key": "pfam",
											"value": "pf00294"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Gene-Faceted-Search-SpeciesFiltered",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response has expected structure\", function () {",
											"    const json = pm.response.json();",
											"    pm.expect(json).to.have.property(\"pfam\");",
											"    pm.expect(json).to.have.property(\"interpro\");",
											"    pm.expect(json).to.have.property(\"kegg\");",
											"    pm.expect(json).to.have.property(\"cog_id\");",
											"    pm.expect(json).to.have.property(\"cog_funcats\");",
											"    pm.expect(json).to.have.property(\"essentiality\");",
											"    pm.expect(json).to.have.property(\"has_amr_info\");",
											"    pm.expect(json).to.have.property(\"total_hits\");",
											"    pm.expect(json).to.have.property(\"operators\");",
											"});",
											"",
											"pm.test(\"No selected filters are present\", function () {",
											"    const json = pm.response.json();",
											"",
											"    const allSelected = [",
											"        ...json.pfam,",
											"        ...json.interpro,",
											"        ...json.kegg,",
											"        ...json.cog_id,",
											"        ...json.cog_funcats,",
											"        ...json.essentiality,",
											"        ...json.has_amr_info",
											"    ].filter(item => item.selected === true);",
											"",
											"    pm.expect(allSelected.length).to.eql(0);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mett-current}}/api/genes/faceted-search?species_acronym=BU&limit=5",
									"host": [
										"{{mett-current}}"
									],
									"path": [
										"api",
										"genes",
										"faceted-search"
									],
									"query": [
										{
											"key": "species_acronym",
											"value": "BU"
										},
										{
											"key": "limit",
											"value": "5"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Gene-Faceted-Search-test",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mett-current}}/api/genes/faceted-search",
									"host": [
										"{{mett-current}}"
									],
									"path": [
										"api",
										"genes",
										"faceted-search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Gene-Autocomplete-01",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Number of pages matches expected value\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(20); ",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mett-current}}/api/genes/autocomplete?species_acronym=BU&query=dnaA",
									"host": [
										"{{mett-current}}"
									],
									"path": [
										"api",
										"genes",
										"autocomplete"
									],
									"query": [
										{
											"key": "species_acronym",
											"value": "BU"
										},
										{
											"key": "query",
											"value": "dnaA"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Gene-Autocomplete-LocusTag",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Number of pages matches expected value\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(1); ",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mett-current}}/api/genes/autocomplete?species_acronym=PV&query=PV_ATCC8482_03700",
									"host": [
										"{{mett-current}}"
									],
									"path": [
										"api",
										"genes",
										"autocomplete"
									],
									"query": [
										{
											"key": "species_acronym",
											"value": "PV"
										},
										{
											"key": "query",
											"value": "PV_ATCC8482_03700"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Gene-Autocomplete-LocusTag-02",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Number of pages matches expected value\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(20); ",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mett-current}}/api/genes/autocomplete?species_acronym=PV&query=PV_TC-KB-P90_00653",
									"host": [
										"{{mett-current}}"
									],
									"path": [
										"api",
										"genes",
										"autocomplete"
									],
									"query": [
										{
											"key": "species_acronym",
											"value": "PV"
										},
										{
											"key": "query",
											"value": "PV_TC-KB-P90_00653"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Gene-Autocomplete-Alias",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Number of pages matches expected value\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.be.at.least(20); ",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mett-current}}/api/genes/autocomplete?query=BVU&page=1&per_page=10&isolates=PV_ATCC8482",
									"host": [
										"{{mett-current}}"
									],
									"path": [
										"",
										"api",
										"genes",
										"autocomplete"
									],
									"query": [
										{
											"key": "query",
											"value": "BVU"
										},
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "per_page",
											"value": "10"
										},
										{
											"key": "isolates",
											"value": "PV_ATCC8482"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Gene-Autocomplete-02",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Number of pages matches expected value\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(3); ",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mett-current}}/api/genes/autocomplete?isolates=BU_2243B,BU_3537,BU_61&query=dnaA",
									"host": [
										"{{mett-current}}"
									],
									"path": [
										"api",
										"genes",
										"autocomplete"
									],
									"query": [
										{
											"key": "isolates",
											"value": "BU_2243B,BU_3537,BU_61"
										},
										{
											"key": "query",
											"value": "dnaA"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Gene-Autocomplete-03",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Number of pages matches expected value\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(4); ",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mett-current}}/api/genes/autocomplete?species_acronym=BU&isolates=BU_3537,BU_AN67,BU_C7-17,BU_CCUG49527&query=dnaA",
									"host": [
										"{{mett-current}}"
									],
									"path": [
										"api",
										"genes",
										"autocomplete"
									],
									"query": [
										{
											"key": "species_acronym",
											"value": "BU"
										},
										{
											"key": "isolates",
											"value": "BU_3537,BU_AN67,BU_C7-17,BU_CCUG49527"
										},
										{
											"key": "query",
											"value": "dnaA"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Gene-Autocomplete-Essentiality-TypeStrain",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Number of pages matches expected value\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(20); ",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mett-current}}/api/genes/autocomplete?species_acronym=BU&gisolates=BU_ATCC8492&query=pr&filter=essentiality:essential",
									"host": [
										"{{mett-current}}"
									],
									"path": [
										"api",
										"genes",
										"autocomplete"
									],
									"query": [
										{
											"key": "species_acronym",
											"value": "BU"
										},
										{
											"key": "gisolates",
											"value": "BU_ATCC8492"
										},
										{
											"key": "query",
											"value": "pr"
										},
										{
											"key": "filter",
											"value": "essentiality:essential"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Gene-Autocomplete-Essentiality-TypeStrain-Ess_Liquid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Number of pages matches expected value\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(8); ",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mett-current}}/api/genes/autocomplete?species_acronym=BU&gisolates=BU_ATCC8492&query=pr&filter=essentiality:essential_liquid",
									"host": [
										"{{mett-current}}"
									],
									"path": [
										"api",
										"genes",
										"autocomplete"
									],
									"query": [
										{
											"key": "species_acronym",
											"value": "BU"
										},
										{
											"key": "gisolates",
											"value": "BU_ATCC8492"
										},
										{
											"key": "query",
											"value": "pr"
										},
										{
											"key": "filter",
											"value": "essentiality:essential_liquid"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Gene-Autocomplete-Essentiality-TypeStrain-Ess_Liquid,Unclear",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Json data length matches expected value\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(10); ",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mett-current}}/api/genes/autocomplete?species_acronym=BU&gisolates=BU_ATCC8492&query=pr&filter=essentiality:essential_liquid,unclear",
									"host": [
										"{{mett-current}}"
									],
									"path": [
										"api",
										"genes",
										"autocomplete"
									],
									"query": [
										{
											"key": "species_acronym",
											"value": "BU"
										},
										{
											"key": "gisolates",
											"value": "BU_ATCC8492"
										},
										{
											"key": "query",
											"value": "pr"
										},
										{
											"key": "filter",
											"value": "essentiality:essential_liquid,unclear"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Gene-Autocomplete-Essentiality-TypeStrain-Ess,Interpro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Json data length matches expected value\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(1); ",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mett-current}}/api/genes/autocomplete?species_acronym=BU&gisolates=BU_ATCC8492&query=pr&filter=essentiality:essential_liquid;interpro:IPR035952",
									"host": [
										"{{mett-current}}"
									],
									"path": [
										"api",
										"genes",
										"autocomplete"
									],
									"query": [
										{
											"key": "species_acronym",
											"value": "BU"
										},
										{
											"key": "gisolates",
											"value": "BU_ATCC8492"
										},
										{
											"key": "query",
											"value": "pr"
										},
										{
											"key": "filter",
											"value": "essentiality:essential_liquid;interpro:IPR035952"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Gene-Autocomplete-Essentiality-Negative",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Json data length matches expected value\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(0); ",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mett-current}}/api/genes/autocomplete?species_acronym=BU&isolates=BU_2243B&query=pr&filter=essentiality:essential",
									"host": [
										"{{mett-current}}"
									],
									"path": [
										"api",
										"genes",
										"autocomplete"
									],
									"query": [
										{
											"key": "species_acronym",
											"value": "BU"
										},
										{
											"key": "isolates",
											"value": "BU_2243B"
										},
										{
											"key": "query",
											"value": "pr"
										},
										{
											"key": "filter",
											"value": "essentiality:essential"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Gene-by-LocusTag-positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Name matches expected value\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.isolate_name).to.eql(\"BU_ATCC8492\");",
											"});",
											"",
											"pm.test(\"Start Position not null\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.start_position).is.not.null;",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mett-current}}/api/genes/BU_ATCC8492_00001",
									"host": [
										"{{mett-current}}"
									],
									"path": [
										"api",
										"genes",
										"BU_ATCC8492_00001"
									]
								}
							},
							"response": []
						},
						{
							"name": "Gene-by-GeneID-negative",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mett-current}}/api/genes/BU_AXCC8492_02153",
									"host": [
										"{{mett-current}}"
									],
									"path": [
										"api",
										"genes",
										"BU_AXCC8492_02153"
									]
								}
							},
							"response": []
						},
						{
							"name": "Gene-All-positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Number of pages matches expected value\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.num_pages).to.be.at.least(35000);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mett-current}}/api/genes/?page=1&per_page=10",
									"host": [
										"{{mett-current}}"
									],
									"path": [
										"api",
										"genes",
										""
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "per_page",
											"value": "10"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Genes-by-GeneString-positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Number of pages matches expected value\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.num_pages).to.be.at.least(5);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mett-current}}/api/genes/search?query=dnaA",
									"host": [
										"{{mett-current}}"
									],
									"path": [
										"api",
										"genes",
										"search"
									],
									"query": [
										{
											"key": "query",
											"value": "dnaA"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Genes-by-GenomeID-Single-postive",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Number of pages matches expected value\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.num_pages).to.be.at.least(180);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mett-current}}/api/genomes/BU_909/genes",
									"host": [
										"{{mett-current}}"
									],
									"path": [
										"api",
										"genomes",
										"BU_909",
										"genes"
									]
								}
							},
							"response": []
						},
						{
							"name": "Genes-by-GenomeID-Single-negative",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Results array is empty\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.results).to.be.an('array').that.is.empty;",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mett-current}}/api/genomes/ABC_6546/genes",
									"host": [
										"{{mett-current}}"
									],
									"path": [
										"api",
										"genomes",
										"ABC_6546",
										"genes"
									]
								}
							},
							"response": []
						},
						{
							"name": "GeneSort-by-SEQID-GeneString-positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Results array contains exactly one record\", function () {",
											"    const jsonData = pm.response.json(); ",
											"    pm.expect(jsonData.results).to.be.an('array').with.lengthOf(10); ",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mett-current}}/api/genes/search/advanced?query=&per_page=10&sort_field=seq_id&sort_order=asc&isolates=BU_909",
									"host": [
										"{{mett-current}}"
									],
									"path": [
										"api",
										"genes",
										"search",
										"advanced"
									],
									"query": [
										{
											"key": "query",
											"value": ""
										},
										{
											"key": "per_page",
											"value": "10"
										},
										{
											"key": "sort_field",
											"value": "seq_id"
										},
										{
											"key": "sort_order",
											"value": "asc"
										},
										{
											"key": "isolates",
											"value": "BU_909"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Genes-by-IsolateName-Multiple-GeneString-positive-01",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Results array contains exactly 5 records\", function () {",
											"    const jsonData = pm.response.json(); ",
											"    pm.expect(jsonData.results).to.be.an('array').with.lengthOf(5);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mett-current}}/api/genes/search/advanced?isolates=BU_2243B,BU_3537,BU_61,BU_909,BU_ATCC8492&query=dnaA",
									"host": [
										"{{mett-current}}"
									],
									"path": [
										"api",
										"genes",
										"search",
										"advanced"
									],
									"query": [
										{
											"key": "isolates",
											"value": "BU_2243B,BU_3537,BU_61,BU_909,BU_ATCC8492"
										},
										{
											"key": "query",
											"value": "dnaA"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Genes-by-IsolateName-Multiple-GeneString-positive-02",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Number of pages matches expected value\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.num_pages).to.be.at.least(4);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mett-current}}/api/genes/search/advanced?isolates=BU_2243B,BU_3537,BU_61,BU_909,BU_ATCC8492&query=&filter=pfam:pf13715;essentiality:not_essential",
									"host": [
										"{{mett-current}}"
									],
									"path": [
										"api",
										"genes",
										"search",
										"advanced"
									],
									"query": [
										{
											"key": "isolates",
											"value": "BU_2243B,BU_3537,BU_61,BU_909,BU_ATCC8492"
										},
										{
											"key": "query",
											"value": ""
										},
										{
											"key": "filter",
											"value": "pfam:pf13715;essentiality:not_essential"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Genes-by-IsolateName-Multiple-GeneString-negative",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Number of pages matches expected value\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.num_pages).to.be.at.least(22000);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mett-current}}/api/genes/search/advanced?isolates=&query=",
									"host": [
										"{{mett-current}}"
									],
									"path": [
										"api",
										"genes",
										"search",
										"advanced"
									],
									"query": [
										{
											"key": "isolates",
											"value": ""
										},
										{
											"key": "query",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Genes-by-Species-IsolateName-Multiple-GeneString-positive-01",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Results array contains exactly 5 records\", function () {",
											"    const jsonData = pm.response.json(); ",
											"    pm.expect(jsonData.results).to.be.an('array').with.lengthOf(5);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mett-current}}/api/genes/search/advanced?species_acronym=bu&isolates=BU_2243B,BU_3537,BU_61,BU_909,BU_ATCC8492&query=dnaA",
									"host": [
										"{{mett-current}}"
									],
									"path": [
										"api",
										"genes",
										"search",
										"advanced"
									],
									"query": [
										{
											"key": "species_acronym",
											"value": "bu"
										},
										{
											"key": "isolates",
											"value": "BU_2243B,BU_3537,BU_61,BU_909,BU_ATCC8492"
										},
										{
											"key": "query",
											"value": "dnaA"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Genes-by-LocusTag-QueryString-Advanced-01",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Results array contains exactly 5 records\", function () {",
											"    const jsonData = pm.response.json(); ",
											"    pm.expect(jsonData.results).to.be.an('array').with.lengthOf(1);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mett-current}}/api/genes/search/advanced?query=BU_2243B_00003&page=1&per_page=10&sort_field=locus_tag&sort_order=asc",
									"host": [
										"{{mett-current}}"
									],
									"path": [
										"api",
										"genes",
										"search",
										"advanced"
									],
									"query": [
										{
											"key": "query",
											"value": "BU_2243B_00003"
										},
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "per_page",
											"value": "10"
										},
										{
											"key": "sort_field",
											"value": "locus_tag"
										},
										{
											"key": "sort_order",
											"value": "asc"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Genes-by-AMY_INFO_FILTER-QueryString-Advanced-02",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Results array contains exactly 5 records\", function () {",
											"    const jsonData = pm.response.json(); ",
											"    pm.expect(jsonData.results).to.be.an('array').with.lengthOf(1);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mett-current}}/api/genes/search/advanced?query=&page=1&per_page=10&sort_field=locus_tag&sort_order=asc&isolates=BU_ATCC8492&filter=has_amr_info%3Atrue",
									"host": [
										"{{mett-current}}"
									],
									"path": [
										"api",
										"genes",
										"search",
										"advanced"
									],
									"query": [
										{
											"key": "query",
											"value": ""
										},
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "per_page",
											"value": "10"
										},
										{
											"key": "sort_field",
											"value": "locus_tag"
										},
										{
											"key": "sort_order",
											"value": "asc"
										},
										{
											"key": "isolates",
											"value": "BU_ATCC8492"
										},
										{
											"key": "filter",
											"value": "has_amr_info%3Atrue"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Genes-by-Species-TypeStrain-GeneString-Essentiality-Positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Number of pages matches expected value\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.num_pages).to.be.at.least(2);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mett-current}}/api/genes/search/advanced?species_acronym=bu&isolates=BU_ATCC8492&query=dna&filter=essentiality:essential",
									"host": [
										"{{mett-current}}"
									],
									"path": [
										"api",
										"genes",
										"search",
										"advanced"
									],
									"query": [
										{
											"key": "species_acronym",
											"value": "bu"
										},
										{
											"key": "isolates",
											"value": "BU_ATCC8492"
										},
										{
											"key": "query",
											"value": "dna"
										},
										{
											"key": "filter",
											"value": "essentiality:essential"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Genes-by-Species-TypeStrain-GeneString-Essentiality-Negative",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Results array is empty\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.results).to.be.an('array').that.is.empty;",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mett-current}}/api/genes/search/advanced?species_acronym=BU&isolates=BU_909&query=pr&filter=essentiality:essential",
									"host": [
										"{{mett-current}}"
									],
									"path": [
										"api",
										"genes",
										"search",
										"advanced"
									],
									"query": [
										{
											"key": "species_acronym",
											"value": "BU"
										},
										{
											"key": "isolates",
											"value": "BU_909"
										},
										{
											"key": "query",
											"value": "pr"
										},
										{
											"key": "filter",
											"value": "essentiality:essential"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Genes-by-Species-GeneString-positive-01",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Number of pages matches expected value\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.num_pages).to.be.at.least(50);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mett-current}}/api/genes/search/advanced?species_acronym=BU&query=dna",
									"host": [
										"{{mett-current}}"
									],
									"path": [
										"api",
										"genes",
										"search",
										"advanced"
									],
									"query": [
										{
											"key": "species_acronym",
											"value": "BU"
										},
										{
											"key": "query",
											"value": "dna"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Genes-by-GeneString-filter-positive-01",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Number of pages matches expected value\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.num_pages).to.be.at.least(100);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mett-current}}/api/genes/search/advanced?query=dna",
									"host": [
										"{{mett-current}}"
									],
									"path": [
										"api",
										"genes",
										"search",
										"advanced"
									],
									"query": [
										{
											"key": "query",
											"value": "dna"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Genes-by-ProteinSequence-01",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Results array contains the protein sequence\", function () {",
											"    const jsonData = pm.response.json(); ",
											"    jsonData.protein_sequen",
											"    pm.expect(jsonData.protein_sequence).that.is.not.empty;",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mett-current}}/api/genes/protein/BU_2243B_00003",
									"host": [
										"{{mett-current}}"
									],
									"path": [
										"api",
										"genes",
										"protein",
										"BU_2243B_00003"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "metadata",
					"item": [
						{
							"name": "COGCategories",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mett-current}}/api/metadata/cog-categories",
									"host": [
										"{{mett-current}}"
									],
									"path": [
										"api",
										"metadata",
										"cog-categories"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	]
}