{
	"info": {
		"_postman_id": "8b555c56-1b63-4a3c-a302-06921a6e5a8d",
		"name": "METT-DataPortal",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "19420352"
	},
	"item": [
		{
			"name": "ME TT - API Integration Tests",
			"item": [
				{
					"name": "species",
					"item": [
						{
							"name": "Species-List-Positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Array length is greater than or equal to 2\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.be.at.least(2); ",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8000/api/species/",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8000",
									"path": [
										"api",
										"species",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "genomes",
					"item": [
						{
							"name": "Autocomplete-genomes-01",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Array length is equal to 5\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(5); ",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "http://localhost:8000/api/genomes/autocomplete?query=bu&limit=5",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8000",
									"path": [
										"api",
										"genomes",
										"autocomplete"
									],
									"query": [
										{
											"key": "query",
											"value": "bu"
										},
										{
											"key": "limit",
											"value": "5"
										}
									]
								},
								"description": "Generated from cURL: curl -X GET \"http://localhost:8000/api/search/autocomplete/?query=Bacteroides&limit=5\"\n"
							},
							"response": []
						},
						{
							"name": "Autocomplete-species-string",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Array length is equal to 10\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(10); ",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8000/api/genomes/autocomplete?query=bu&limit=10",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8000",
									"path": [
										"api",
										"genomes",
										"autocomplete"
									],
									"query": [
										{
											"key": "query",
											"value": "bu"
										},
										{
											"key": "limit",
											"value": "10"
										}
									]
								},
								"description": "Generated from cURL: curl -X GET \"http://localhost:8000/api/search/autocomplete/?query=Bacteroides&limit=5\"\n"
							},
							"response": []
						},
						{
							"name": "Autocomplete-with-species",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Array length is equal to 5\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(5); ",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8000/api/genomes/autocomplete?query=bu&species_id=1&limit=5",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8000",
									"path": [
										"api",
										"genomes",
										"autocomplete"
									],
									"query": [
										{
											"key": "query",
											"value": "bu"
										},
										{
											"key": "species_id",
											"value": "1"
										},
										{
											"key": "limit",
											"value": "5"
										}
									]
								},
								"description": "Generated from cURL: curl -X GET \"http://localhost:8000/api/search/autocomplete/?query=Bacteroides&limit=5\"\n"
							},
							"response": []
						},
						{
							"name": "Genome-by-genome-ID-positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Name matches expected value\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.common_name).to.eql(\"Bacteroides\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8000/api/genomes/1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8000",
									"path": [
										"api",
										"genomes",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Genome-by-genome-ID-negative",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8000/api/genomes/9999",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8000",
									"path": [
										"api",
										"genomes",
										"9999"
									]
								}
							},
							"response": []
						},
						{
							"name": "Genomes-All-positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Number of pages matches expected value\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.num_pages).to.be.at.least(10);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8000/api/genomes/?page=1&per_page=25",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8000",
									"path": [
										"api",
										"genomes",
										""
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "per_page",
											"value": "25"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Genomes-All-TypeStrains",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const response = pm.response.json();",
											"",
											"pm.test(\"At least one type strain is returned\", function () {",
											"    pm.expect(response).to.be.an(\"array\").that.is.not.empty;",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8000/api/genomes/type-strains",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8000",
									"path": [
										"api",
										"genomes",
										"type-strains"
									]
								}
							},
							"response": []
						},
						{
							"name": "Genomes-All-negative",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Results array is empty\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.results).to.be.an('array').that.is.empty;",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8000/api/genomes/?page=-1&per_page=-1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8000",
									"path": [
										"api",
										"genomes",
										""
									],
									"query": [
										{
											"key": "page",
											"value": "-1"
										},
										{
											"key": "per_page",
											"value": "-1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Genomes-by-GenomeString-positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Number of pages matches expected value\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.num_pages).to.be.at.least(5);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8000/api/genomes/search?query=bu",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8000",
									"path": [
										"api",
										"genomes",
										"search"
									],
									"query": [
										{
											"key": "query",
											"value": "bu"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Genomes-by-GenomeString-negative",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Results array is empty\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.results).to.be.an('array').that.is.empty;",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8000/api/genomes/search?query=xxx",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8000",
									"path": [
										"api",
										"genomes",
										"search"
									],
									"query": [
										{
											"key": "query",
											"value": "xxx"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Genomes-by-SpeciesID-positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Number of pages matches expected value\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.num_pages).to.be.at.least(5);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8000/api/species/1/genomes",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8000",
									"path": [
										"api",
										"species",
										"1",
										"genomes"
									]
								}
							},
							"response": []
						},
						{
							"name": "Genomes-by-SpeciesID-negative",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Results array is empty\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.results).to.be.an('array').that.is.empty;",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8000/api/species/9999/genomes",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8000",
									"path": [
										"api",
										"species",
										"9999",
										"genomes"
									]
								}
							},
							"response": []
						},
						{
							"name": "Genomes-by-SpeciesID-GenomeString-positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Number of pages matches expected value\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.num_pages).to.be.at.least(5);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8000/api/species/2/genomes/search?query=pv&page=3",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8000",
									"path": [
										"api",
										"species",
										"2",
										"genomes",
										"search"
									],
									"query": [
										{
											"key": "query",
											"value": "pv"
										},
										{
											"key": "page",
											"value": "3"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Genomes-by-SpeciesID-GenomeString-negative-01",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Results array is empty\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.results).to.be.an('array').that.is.empty;",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8000/api/species/1/genomes/search?query=pv",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8000",
									"path": [
										"api",
										"species",
										"1",
										"genomes",
										"search"
									],
									"query": [
										{
											"key": "query",
											"value": "pv"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Genomes-by-SpeciesID-GenomeString-negative-02",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Results array is empty\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.results).to.be.an('array').that.is.empty;",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8000/api/species/999/genomes/search?query=pv",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8000",
									"path": [
										"api",
										"species",
										"999",
										"genomes",
										"search"
									],
									"query": [
										{
											"key": "query",
											"value": "pv"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "genes",
					"item": [
						{
							"name": "Gene-Autocomplete-01",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Number of pages matches expected value\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(10); ",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8000/api/genes/autocomplete?species_id=1&query=dnaA",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8000",
									"path": [
										"api",
										"genes",
										"autocomplete"
									],
									"query": [
										{
											"key": "species_id",
											"value": "1"
										},
										{
											"key": "query",
											"value": "dnaA"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Gene-Autocomplete-02",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Number of pages matches expected value\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(3); ",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8000/api/genes/autocomplete?genome_ids=1,2,3&query=dnaA",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8000",
									"path": [
										"api",
										"genes",
										"autocomplete"
									],
									"query": [
										{
											"key": "genome_ids",
											"value": "1,2,3"
										},
										{
											"key": "query",
											"value": "dnaA"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Gene-Autocomplete-03",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Number of pages matches expected value\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(4); ",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8000/api/genes/autocomplete?species_id=1&genome_ids=2,5,7,10&query=dnaA",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8000",
									"path": [
										"api",
										"genes",
										"autocomplete"
									],
									"query": [
										{
											"key": "species_id",
											"value": "1"
										},
										{
											"key": "genome_ids",
											"value": "2,5,7,10"
										},
										{
											"key": "query",
											"value": "dnaA"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Gene-by-GeneID-positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Name matches expected value\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.strain).to.eql(\"BU_3537\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8000/api/genes/431",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8000",
									"path": [
										"api",
										"genes",
										"431"
									]
								}
							},
							"response": []
						},
						{
							"name": "Gene-by-GeneID-negative",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8000/api/genes/-1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8000",
									"path": [
										"api",
										"genes",
										"-1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Gene-All-positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Number of pages matches expected value\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.num_pages).to.be.at.least(35000);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8000/api/genes/?page=1&per_page=10",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8000",
									"path": [
										"api",
										"genes",
										""
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "per_page",
											"value": "10"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Genes-by-GeneString-positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Number of pages matches expected value\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.num_pages).to.be.at.least(10);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8000/api/genes/search?query=dnaA",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8000",
									"path": [
										"api",
										"genes",
										"search"
									],
									"query": [
										{
											"key": "query",
											"value": "dnaA"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Genes-by-GenomeID-Single-postive",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Number of pages matches expected value\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.num_pages).to.be.at.least(300);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8000/api/genomes/1/genes",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8000",
									"path": [
										"api",
										"genomes",
										"1",
										"genes"
									]
								}
							},
							"response": []
						},
						{
							"name": "Genes-by-GenomeID-Single-negative",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Results array is empty\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.results).to.be.an('array').that.is.empty;",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8000/api/genomes/9999/genes",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8000",
									"path": [
										"api",
										"genomes",
										"9999",
										"genes"
									]
								}
							},
							"response": []
						},
						{
							"name": "Genes-by-GenomeID-Single-GeneString-positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Results array contains exactly one record\", function () {",
											"    const jsonData = pm.response.json(); ",
											"    pm.expect(jsonData.results).to.be.an('array').with.lengthOf(1); ",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8000/api/genomes/1/genes/search?query=dnaA",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8000",
									"path": [
										"api",
										"genomes",
										"1",
										"genes",
										"search"
									],
									"query": [
										{
											"key": "query",
											"value": "dnaA"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Genes-by-GenomeID-Single-GeneString-negative",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Results array is empty\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.results).to.be.an('array').that.is.empty;",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8000/api/genomes/999/genes/search?query=",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8000",
									"path": [
										"api",
										"genomes",
										"999",
										"genes",
										"search"
									],
									"query": [
										{
											"key": "query",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Genes-by-GenomeID-Multiple-GeneString-positive-01",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Results array contains exactly 5 records\", function () {",
											"    const jsonData = pm.response.json(); ",
											"    pm.expect(jsonData.results).to.be.an('array').with.lengthOf(5);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8000/api/genes/search/filter?genome_ids=1,2,3,4,5&query=dnaA",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8000",
									"path": [
										"api",
										"genes",
										"search",
										"filter"
									],
									"query": [
										{
											"key": "genome_ids",
											"value": "1,2,3,4,5"
										},
										{
											"key": "query",
											"value": "dnaA"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Genes-by-GenomeID-Multiple-GeneString-positive-02",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Number of pages matches expected value\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.num_pages).to.be.at.least(1900);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8000/api/genes/search/filter?genome_ids=1,2,3,4,5&query=",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8000",
									"path": [
										"api",
										"genes",
										"search",
										"filter"
									],
									"query": [
										{
											"key": "genome_ids",
											"value": "1,2,3,4,5"
										},
										{
											"key": "query",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Genes-by-GenomeID-Multiple-GeneString-negative",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Number of pages matches expected value\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.num_pages).to.be.at.least(35000);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8000/api/genes/search/filter?genome_ids=&query=",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8000",
									"path": [
										"api",
										"genes",
										"search",
										"filter"
									],
									"query": [
										{
											"key": "genome_ids",
											"value": ""
										},
										{
											"key": "query",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Genes-by-Species-GenomeID-Multiple-GeneString-positive-01",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Results array contains exactly 5 records\", function () {",
											"    const jsonData = pm.response.json(); ",
											"    pm.expect(jsonData.results).to.be.an('array').with.lengthOf(5);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8000/api/genes/search/filter?species_id=1&genome_ids=1,2,3,4,5&query=dnaA",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8000",
									"path": [
										"api",
										"genes",
										"search",
										"filter"
									],
									"query": [
										{
											"key": "species_id",
											"value": "1"
										},
										{
											"key": "genome_ids",
											"value": "1,2,3,4,5"
										},
										{
											"key": "query",
											"value": "dnaA"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Genes-by-Species-GeneString-positive-01",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Number of pages matches expected value\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.num_pages).to.be.at.least(50);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8000/api/genes/search/filter?species_id=1&query=dna",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8000",
									"path": [
										"api",
										"genes",
										"search",
										"filter"
									],
									"query": [
										{
											"key": "species_id",
											"value": "1"
										},
										{
											"key": "query",
											"value": "dna"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Genes-by-GeneString-filter-positive-01",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Number of pages matches expected value\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.num_pages).to.be.at.least(100);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8000/api/genes/search/filter?query=dna",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8000",
									"path": [
										"api",
										"genes",
										"search",
										"filter"
									],
									"query": [
										{
											"key": "query",
											"value": "dna"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	]
}