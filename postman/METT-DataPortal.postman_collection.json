{
	"info": {
		"_postman_id": "8b555c56-1b63-4a3c-a302-06921a6e5a8d",
		"name": "METT-DataPortal",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "19420352"
	},
	"item": [
		{
			"name": "ME TT - API Integration Tests",
			"item": [
				{
					"name": "Health",
					"item": [
						{
							"name": "App-Health-Check",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Health is Ok\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"ok\")",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mett-current}}/api/health",
									"host": [
										"{{mett-current}}"
									],
									"path": [
										"api",
										"health"
									]
								}
							},
							"response": []
						},
						{
							"name": "Features-Check",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mett-current}}/api/features",
									"host": [
										"{{mett-current}}"
									],
									"path": [
										"api",
										"features"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "species",
					"item": [
						{
							"name": "Species-List-Positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Array length is greater than or equal to 2\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.be.at.least(2); ",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mett-current}}/api/species/",
									"host": [
										"{{mett-current}}"
									],
									"path": [
										"api",
										"species",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "genomes",
					"item": [
						{
							"name": "Autocomplete-genomes",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Array length is equal to 5\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(5); ",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{mett-current}}/api/genomes/autocomplete?query=bu&limit=5",
									"host": [
										"{{mett-current}}"
									],
									"path": [
										"api",
										"genomes",
										"autocomplete"
									],
									"query": [
										{
											"key": "query",
											"value": "bu"
										},
										{
											"key": "limit",
											"value": "5"
										}
									]
								},
								"description": "Generated from cURL: curl -X GET \"http://localhost:8000/api/search/autocomplete/?query=Bacteroides&limit=5\"\n"
							},
							"response": []
						},
						{
							"name": "Autocomplete-with-Filter-species",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Array length is equal to 5\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.eql(5); ",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mett-current}}/api/genomes/autocomplete?query=bu&species_acronym=bu&limit=5",
									"host": [
										"{{mett-current}}"
									],
									"path": [
										"api",
										"genomes",
										"autocomplete"
									],
									"query": [
										{
											"key": "query",
											"value": "bu"
										},
										{
											"key": "species_acronym",
											"value": "bu"
										},
										{
											"key": "limit",
											"value": "5"
										}
									]
								},
								"description": "Generated from cURL: curl -X GET \"http://localhost:8000/api/search/autocomplete/?query=Bacteroides&limit=5\"\n"
							},
							"response": []
						},
						{
							"name": "Genome-by-genome-Name-positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Name matches expected value\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].species_scientific_name).contain(\"Bacteroides\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mett-current}}/api/genomes/by-isolate-names?isolates=BU_909",
									"host": [
										"{{mett-current}}"
									],
									"path": [
										"api",
										"genomes",
										"by-isolate-names"
									],
									"query": [
										{
											"key": "isolates",
											"value": "BU_909"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Genome-by-genome-Name-negative",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mett-current}}/api/genomes/strain/CU_909",
									"host": [
										"{{mett-current}}"
									],
									"path": [
										"api",
										"genomes",
										"strain",
										"CU_909"
									]
								}
							},
							"response": []
						},
						{
							"name": "Genome-multple-by-isolate-names-positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Name matches expected value\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].species_scientific_name).contain(\"Bacteroides\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{mett-current}}/api/genomes/by-isolate-names?isolates=BU_ATCC8492,PV_ATCC8482",
									"host": [
										"{{mett-current}}"
									],
									"path": [
										"api",
										"genomes",
										"by-isolate-names"
									],
									"query": [
										{
											"key": "isolates",
											"value": "BU_ATCC8492,PV_ATCC8482"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Genome-multple-by-isolate-names-single-positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Name matches expected value\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData[0].species_scientific_name).contain(\"Bacteroides\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{mett-current}}/api/genomes/by-isolate-names?isolates=BU_ATCC8492",
									"host": [
										"{{mett-current}}"
									],
									"path": [
										"api",
										"genomes",
										"by-isolate-names"
									],
									"query": [
										{
											"key": "isolates",
											"value": "BU_ATCC8492"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Genomes-All-positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Number of pages matches expected value\", function () {",
											"    const jsonData = pm.response.json().pagination;",
											"    pm.expect(jsonData.num_pages).to.be.at.least(10);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mett-current}}/api/genomes/?page=1&per_page=5",
									"host": [
										"{{mett-current}}"
									],
									"path": [
										"api",
										"genomes",
										""
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "per_page",
											"value": "5"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Genomes-All-TypeStrains",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const response = pm.response.json();",
											"",
											"pm.test(\"At least one type strain is returned\", function () {",
											"    pm.expect(response).to.be.an(\"array\").that.is.not.empty;",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mett-current}}/api/genomes/type-strains",
									"host": [
										"{{mett-current}}"
									],
									"path": [
										"api",
										"genomes",
										"type-strains"
									]
								}
							},
							"response": []
						},
						{
							"name": "Genomes-All-negative",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Results array is empty\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.data).to.be.an('array').that.is.empty;",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mett-current}}/api/genomes/?page=-1&per_page=-1",
									"host": [
										"{{mett-current}}"
									],
									"path": [
										"api",
										"genomes",
										""
									],
									"query": [
										{
											"key": "page",
											"value": "-1"
										},
										{
											"key": "per_page",
											"value": "-1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Genomes-by-GenomeString-positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Number of pages matches expected value\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.data).to.be.an('array').length(1)",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mett-current}}/api/genomes/search?query=PV_H4",
									"host": [
										"{{mett-current}}"
									],
									"path": [
										"api",
										"genomes",
										"search"
									],
									"query": [
										{
											"key": "query",
											"value": "PV_H4"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Genomes-by-iso-species-query",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Number of pages matches expected value\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.data).to.be.an('array').length(1)",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mett-current}}/api/genomes/search?query=90&isolates=BU_909&species_acronym=BU",
									"host": [
										"{{mett-current}}"
									],
									"path": [
										"api",
										"genomes",
										"search"
									],
									"query": [
										{
											"key": "query",
											"value": "90"
										},
										{
											"key": "isolates",
											"value": "BU_909"
										},
										{
											"key": "species_acronym",
											"value": "BU"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Genomes-by-GenomeString-negative",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Results array is empty\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.data).to.be.an('array').that.is.empty;",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mett-current}}/api/genomes/search?query=xxx",
									"host": [
										"{{mett-current}}"
									],
									"path": [
										"api",
										"genomes",
										"search"
									],
									"query": [
										{
											"key": "query",
											"value": "xxx"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Genomes-by-GenomeString-all-blank",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Number of pages matches expected value\", function () {",
											"    const jsonData = pm.response.json().pagination;",
											"    pm.expect(jsonData.num_pages).to.be.at.least(5);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mett-current}}/api/genomes/search?query=&sortField=species&sortOrder=asc",
									"host": [
										"{{mett-current}}"
									],
									"path": [
										"api",
										"genomes",
										"search"
									],
									"query": [
										{
											"key": "query",
											"value": ""
										},
										{
											"key": "sortField",
											"value": "species"
										},
										{
											"key": "sortOrder",
											"value": "asc"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Genomes-by-SpeciesAcronym-positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Number of pages matches expected value\", function () {",
											"    const jsonData = pm.response.json().pagination;",
											"    pm.expect(jsonData.num_pages).to.be.at.least(3);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mett-current}}/api/species/bu/genomes",
									"host": [
										"{{mett-current}}"
									],
									"path": [
										"api",
										"species",
										"bu",
										"genomes"
									]
								}
							},
							"response": []
						},
						{
							"name": "Genomes-by-SpeciesAcronym-negative",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Results array is empty\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.data).to.be.an('array').that.is.empty;",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mett-current}}/api/species/abc/genomes",
									"host": [
										"{{mett-current}}"
									],
									"path": [
										"api",
										"species",
										"abc",
										"genomes"
									]
								}
							},
							"response": []
						},
						{
							"name": "Genomes-by-SpeciesScronym-GenomeString-positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Number of pages matches expected value\", function () {",
											"    const jsonData = pm.response.json().pagination;",
											"    pm.expect(jsonData.num_pages).to.be.at.least(3);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mett-current}}/api/species/pv/genomes/search?query=pv&page=3",
									"host": [
										"{{mett-current}}"
									],
									"path": [
										"api",
										"species",
										"pv",
										"genomes",
										"search"
									],
									"query": [
										{
											"key": "query",
											"value": "pv"
										},
										{
											"key": "page",
											"value": "3"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Genomes-by-SpeciesAcronym-GenomeString-negative-01",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Results array is empty\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.data).to.be.an('array').that.is.empty;",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mett-current}}/api/species/1/genomes/search?query=pv",
									"host": [
										"{{mett-current}}"
									],
									"path": [
										"api",
										"species",
										"1",
										"genomes",
										"search"
									],
									"query": [
										{
											"key": "query",
											"value": "pv"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Genomes-by-SpeciesAcronym-GenomeString-negative-02",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Results array is empty\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.data).to.be.an('array').that.is.empty;",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mett-current}}/api/species/abc/genomes/search?query=pv",
									"host": [
										"{{mett-current}}"
									],
									"path": [
										"api",
										"species",
										"abc",
										"genomes",
										"search"
									],
									"query": [
										{
											"key": "query",
											"value": "pv"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Essentiality-By-TypeStrain_BU-Positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Extract the response JSON",
											"let response = pm.response.json();",
											"",
											"// Check if the locus_tag \"BU_ATCC8492_00001\" exists",
											"let geneData = Object.values(response).find(item => item.locus_tag === \"BU_ATCC8492_00001\");",
											"",
											"pm.test(\"Check if locus_tag BU_ATCC8492_00001 has essentiality as 'essential'\", function () {",
											"    // Ensure the gene data is found",
											"    pm.expect(geneData).to.not.be.undefined;",
											"",
											"    // Check if any essentiality_data entry has \"essential\" as the essentiality value",
											"    let isEssential = geneData.essentiality === \"essential\";",
											"",
											"    // Validate the test",
											"    pm.expect(isEssential).to.be.true;",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mett-current}}/api/genomes/BU_ATCC8492/essentiality/contig_1",
									"host": [
										"{{mett-current}}"
									],
									"path": [
										"api",
										"genomes",
										"BU_ATCC8492",
										"essentiality",
										"contig_1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Essentiality-By-TypeStrain_PV-Positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// Extract the response JSON",
											"let response = pm.response.json();",
											"",
											"// Check if the locus_tag \"PV_ATCC8482_00001\" exists",
											"let geneData = Object.values(response).find(item => item.locus_tag === \"PV_ATCC8482_00001\");",
											"",
											"pm.test(\"Check if locus_tag PV_ATCC8482_00001 has essentiality as 'essential'\", function () {",
											"    // Ensure the gene data is found",
											"    pm.expect(geneData).to.not.be.undefined;",
											"",
											"    // Check if any essentiality_data entry has \"essential\" as the essentiality value",
											"    let isEssential = geneData.essentiality === \"essential\";",
											"",
											"    // Validate the test",
											"    pm.expect(isEssential).to.be.true;",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mett-current}}/api/genomes/PV_ATCC8482/essentiality/contig_1",
									"host": [
										"{{mett-current}}"
									],
									"path": [
										"api",
										"genomes",
										"PV_ATCC8482",
										"essentiality",
										"contig_1"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "genes",
					"item": [
						{
							"name": "Gene-Faceted-Search-pfam",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response has expected structure\", function () {",
											"    const json = pm.response.json();",
											"    pm.expect(json.data).to.have.property(\"pfam\");",
											"    pm.expect(json.data).to.have.property(\"interpro\");",
											"    pm.expect(json.data).to.have.property(\"kegg\");",
											"    pm.expect(json.data).to.have.property(\"cog_id\");",
											"    pm.expect(json.data).to.have.property(\"cog_funcats\");",
											"    pm.expect(json.data).to.have.property(\"essentiality\");",
											"    pm.expect(json.data).to.have.property(\"has_amr_info\");",
											"    pm.expect(json.data).to.have.property(\"total_hits\");",
											"    pm.expect(json.data).to.have.property(\"operators\");",
											"});",
											"",
											"pm.test(\"Selected pfam filter is correctly marked\", function () {",
											"    const pfam = pm.response.json().data.pfam;",
											"    const selectedPfam = pfam.find(item => item.value === \"pf13715\");",
											"    pm.expect(selectedPfam).to.not.be.undefined;",
											"    pm.expect(selectedPfam.selected).to.eql(true);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mett-current}}/api/genes/faceted-search?species_acronym=BU&limit=10&pfam=pf13715",
									"host": [
										"{{mett-current}}"
									],
									"path": [
										"api",
										"genes",
										"faceted-search"
									],
									"query": [
										{
											"key": "species_acronym",
											"value": "BU"
										},
										{
											"key": "limit",
											"value": "10"
										},
										{
											"key": "pfam",
											"value": "pf13715"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Gene-Faceted-Search-Interpro-pfam",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response has expected structure\", function () {",
											"    const json = pm.response.json().data;",
											"    pm.expect(json).to.have.property(\"pfam\");",
											"    pm.expect(json).to.have.property(\"interpro\");",
											"    pm.expect(json).to.have.property(\"kegg\");",
											"    pm.expect(json).to.have.property(\"cog_id\");",
											"    pm.expect(json).to.have.property(\"cog_funcats\");",
											"    pm.expect(json).to.have.property(\"essentiality\");",
											"    pm.expect(json).to.have.property(\"has_amr_info\");",
											"    pm.expect(json).to.have.property(\"total_hits\");",
											"    pm.expect(json).to.have.property(\"operators\");",
											"});",
											"",
											"pm.test(\"Selected pfam and interpro filters are correctly marked\", function () {",
											"    const json = pm.response.json().data;",
											"",
											"    const selectedPfam = json.pfam.find(item => item.value === \"pf00294\");",
											"    const selectedInterpro = json.interpro.find(item => item.value === \"ipr011611\");",
											"",
											"    pm.expect(selectedPfam).to.not.be.undefined;",
											"    pm.expect(selectedPfam.selected).to.eql(true);",
											"",
											"    pm.expect(selectedInterpro).to.not.be.undefined;",
											"    pm.expect(selectedInterpro.selected).to.eql(true);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mett-current}}/api/genes/faceted-search?species_acronym=BU&limit=5&interpro=ipr011611&pfam=pf00294",
									"host": [
										"{{mett-current}}"
									],
									"path": [
										"api",
										"genes",
										"faceted-search"
									],
									"query": [
										{
											"key": "species_acronym",
											"value": "BU"
										},
										{
											"key": "limit",
											"value": "5"
										},
										{
											"key": "interpro",
											"value": "ipr011611"
										},
										{
											"key": "pfam",
											"value": "pf00294"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Gene-Faceted-Search-SpeciesFiltered",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response has expected structure\", function () {",
											"    const json = pm.response.json().data;",
											"    pm.expect(json).to.have.property(\"pfam\");",
											"    pm.expect(json).to.have.property(\"interpro\");",
											"    pm.expect(json).to.have.property(\"kegg\");",
											"    pm.expect(json).to.have.property(\"cog_id\");",
											"    pm.expect(json).to.have.property(\"cog_funcats\");",
											"    pm.expect(json).to.have.property(\"essentiality\");",
											"    pm.expect(json).to.have.property(\"has_amr_info\");",
											"    pm.expect(json).to.have.property(\"total_hits\");",
											"    pm.expect(json).to.have.property(\"operators\");",
											"});",
											"",
											"pm.test(\"No selected filters are present\", function () {",
											"    const json = pm.response.json().data;",
											"",
											"    const allSelected = [",
											"        ...json.pfam,",
											"        ...json.interpro,",
											"        ...json.kegg,",
											"        ...json.cog_id,",
											"        ...json.cog_funcats,",
											"        ...json.essentiality,",
											"        ...json.has_amr_info",
											"    ].filter(item => item.selected === true);",
											"",
											"    pm.expect(allSelected.length).to.eql(0);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mett-current}}/api/genes/faceted-search?species_acronym=BU&limit=5",
									"host": [
										"{{mett-current}}"
									],
									"path": [
										"api",
										"genes",
										"faceted-search"
									],
									"query": [
										{
											"key": "species_acronym",
											"value": "BU"
										},
										{
											"key": "limit",
											"value": "5"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Gene-Faceted-Search-test",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mett-current}}/api/genes/faceted-search",
									"host": [
										"{{mett-current}}"
									],
									"path": [
										"api",
										"genes",
										"faceted-search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Gene-Faceted-Search-test Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mett-prod}}/api/genes/faceted-search",
									"host": [
										"{{mett-prod}}"
									],
									"path": [
										"api",
										"genes",
										"faceted-search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Gene-Autocomplete-01",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Number of pages matches expected value\", function () {",
											"    const jsonData = pm.response.json().data;",
											"    pm.expect(jsonData.length).to.eql(20); ",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mett-current}}/api/genes/autocomplete?species_acronym=BU&query=dnaA",
									"host": [
										"{{mett-current}}"
									],
									"path": [
										"api",
										"genes",
										"autocomplete"
									],
									"query": [
										{
											"key": "species_acronym",
											"value": "BU"
										},
										{
											"key": "query",
											"value": "dnaA"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Gene-Autocomplete-LocusTag",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Number of pages matches expected value\", function () {",
											"    const jsonData = pm.response.json().data;",
											"    pm.expect(jsonData.length).to.eql(1); ",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mett-current}}/api/genes/autocomplete?species_acronym=PV&query=PV_ATCC8482_03700",
									"host": [
										"{{mett-current}}"
									],
									"path": [
										"api",
										"genes",
										"autocomplete"
									],
									"query": [
										{
											"key": "species_acronym",
											"value": "PV"
										},
										{
											"key": "query",
											"value": "PV_ATCC8482_03700"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Gene-Autocomplete-UniprotId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Number of pages matches expected value\", function () {",
											"    const jsonData = pm.response.json().data;",
											"    pm.expect(jsonData.length).to.eql(1); ",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mett-current}}/api/genes/autocomplete?query=A7V2E8",
									"host": [
										"{{mett-current}}"
									],
									"path": [
										"api",
										"genes",
										"autocomplete"
									],
									"query": [
										{
											"key": "query",
											"value": "A7V2E8"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Gene-Autocomplete-LocusTag-02",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Number of pages matches expected value\", function () {",
											"    const jsonData = pm.response.json().data;",
											"    pm.expect(jsonData.length).to.eql(20); ",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mett-current}}/api/genes/autocomplete?species_acronym=PV&query=PV_TC-KB-P90_00653",
									"host": [
										"{{mett-current}}"
									],
									"path": [
										"api",
										"genes",
										"autocomplete"
									],
									"query": [
										{
											"key": "species_acronym",
											"value": "PV"
										},
										{
											"key": "query",
											"value": "PV_TC-KB-P90_00653"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Gene-Autocomplete-Alias",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Number of pages matches expected value\", function () {",
											"    const jsonData = pm.response.json().data;",
											"    pm.expect(jsonData.length).to.be.at.least(20); ",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mett-current}}/api/genes/autocomplete?query=BVU&page=1&per_page=10&isolates=PV_ATCC8482",
									"host": [
										"{{mett-current}}"
									],
									"path": [
										"",
										"api",
										"genes",
										"autocomplete"
									],
									"query": [
										{
											"key": "query",
											"value": "BVU"
										},
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "per_page",
											"value": "10"
										},
										{
											"key": "isolates",
											"value": "PV_ATCC8482"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Gene-Autocomplete-02",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Number of pages matches expected value\", function () {",
											"    const jsonData = pm.response.json().data;",
											"    pm.expect(jsonData.length).to.eql(3); ",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mett-current}}/api/genes/autocomplete?isolates=BU_2243B,BU_3537,BU_61&query=dnaA",
									"host": [
										"{{mett-current}}"
									],
									"path": [
										"api",
										"genes",
										"autocomplete"
									],
									"query": [
										{
											"key": "isolates",
											"value": "BU_2243B,BU_3537,BU_61"
										},
										{
											"key": "query",
											"value": "dnaA"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Gene-Autocomplete-03",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Number of pages matches expected value\", function () {",
											"    const jsonData = pm.response.json().data;",
											"    pm.expect(jsonData.length).to.eql(4); ",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mett-current}}/api/genes/autocomplete?species_acronym=BU&isolates=BU_3537,BU_AN67,BU_C7-17,BU_CCUG49527&query=dnaA",
									"host": [
										"{{mett-current}}"
									],
									"path": [
										"api",
										"genes",
										"autocomplete"
									],
									"query": [
										{
											"key": "species_acronym",
											"value": "BU"
										},
										{
											"key": "isolates",
											"value": "BU_3537,BU_AN67,BU_C7-17,BU_CCUG49527"
										},
										{
											"key": "query",
											"value": "dnaA"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Gene-Autocomplete-Essentiality-TypeStrain",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Number of pages matches expected value\", function () {",
											"    const jsonData = pm.response.json().data;",
											"    pm.expect(jsonData.length).to.eql(20); ",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mett-current}}/api/genes/autocomplete?species_acronym=BU&gisolates=BU_ATCC8492&query=pr&filter=essentiality:essential",
									"host": [
										"{{mett-current}}"
									],
									"path": [
										"api",
										"genes",
										"autocomplete"
									],
									"query": [
										{
											"key": "species_acronym",
											"value": "BU"
										},
										{
											"key": "gisolates",
											"value": "BU_ATCC8492"
										},
										{
											"key": "query",
											"value": "pr"
										},
										{
											"key": "filter",
											"value": "essentiality:essential"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Gene-Autocomplete-Essentiality-TypeStrain-Ess_Liquid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Number of pages matches expected value\", function () {",
											"    const jsonData = pm.response.json().data;",
											"    pm.expect(jsonData.length).to.eql(3); ",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mett-current}}/api/genes/autocomplete?species_acronym=BU&gisolates=BU_ATCC8492&query=pr&filter=essentiality:essential_liquid",
									"host": [
										"{{mett-current}}"
									],
									"path": [
										"api",
										"genes",
										"autocomplete"
									],
									"query": [
										{
											"key": "species_acronym",
											"value": "BU"
										},
										{
											"key": "gisolates",
											"value": "BU_ATCC8492"
										},
										{
											"key": "query",
											"value": "pr"
										},
										{
											"key": "filter",
											"value": "essentiality:essential_liquid"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Gene-Autocomplete-Essentiality-TypeStrain-Ess_Liquid,Unclear",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Json data length matches expected value\", function () {",
											"    const jsonData = pm.response.json().data;",
											"    pm.expect(jsonData.length).to.eql(20); ",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mett-current}}/api/genes/autocomplete?species_acronym=BU&gisolates=BU_ATCC8492&query=pr&filter=essentiality:essential_liquid,unclear",
									"host": [
										"{{mett-current}}"
									],
									"path": [
										"api",
										"genes",
										"autocomplete"
									],
									"query": [
										{
											"key": "species_acronym",
											"value": "BU"
										},
										{
											"key": "gisolates",
											"value": "BU_ATCC8492"
										},
										{
											"key": "query",
											"value": "pr"
										},
										{
											"key": "filter",
											"value": "essentiality:essential_liquid,unclear"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Gene-Autocomplete-Essentiality-TypeStrain-Ess,Interpro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Json data length matches expected value\", function () {",
											"    const jsonData = pm.response.json().data;",
											"    pm.expect(jsonData.length).to.eql(1); ",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mett-current}}/api/genes/autocomplete?species_acronym=BU&gisolates=BU_ATCC8492&query=pr&filter=essentiality:essential_liquid;interpro:IPR035952",
									"host": [
										"{{mett-current}}"
									],
									"path": [
										"api",
										"genes",
										"autocomplete"
									],
									"query": [
										{
											"key": "species_acronym",
											"value": "BU"
										},
										{
											"key": "gisolates",
											"value": "BU_ATCC8492"
										},
										{
											"key": "query",
											"value": "pr"
										},
										{
											"key": "filter",
											"value": "essentiality:essential_liquid;interpro:IPR035952"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Gene-Autocomplete-Essentiality-Negative",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Json data length matches expected value\", function () {",
											"    const jsonData = pm.response.json().data;",
											"    pm.expect(jsonData.length).to.eql(0); ",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mett-current}}/api/genes/autocomplete?species_acronym=BU&isolates=BU_2243B&query=pr&filter=essentiality:essential",
									"host": [
										"{{mett-current}}"
									],
									"path": [
										"api",
										"genes",
										"autocomplete"
									],
									"query": [
										{
											"key": "species_acronym",
											"value": "BU"
										},
										{
											"key": "isolates",
											"value": "BU_2243B"
										},
										{
											"key": "query",
											"value": "pr"
										},
										{
											"key": "filter",
											"value": "essentiality:essential"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Gene-by-LocusTag-positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Name matches expected value\", function () {",
											"    const jsonData = pm.response.json().data;",
											"    pm.expect(jsonData.isolate_name).to.eql(\"BU_ATCC8492\");",
											"});",
											"",
											"pm.test(\"Start Position not null\", function () {",
											"    const jsonData = pm.response.json().data;",
											"    pm.expect(jsonData.start_position).is.not.null;",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mett-current}}/api/genes/BU_ATCC8492_00001",
									"host": [
										"{{mett-current}}"
									],
									"path": [
										"api",
										"genes",
										"BU_ATCC8492_00001"
									]
								}
							},
							"response": []
						},
						{
							"name": "Gene-by-GeneID-negative",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 500\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mett-current}}/api/genes/BU_AXCC8492_02153",
									"host": [
										"{{mett-current}}"
									],
									"path": [
										"api",
										"genes",
										"BU_AXCC8492_02153"
									]
								}
							},
							"response": []
						},
						{
							"name": "Gene-All-positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Number of pages matches expected value\", function () {",
											"    const jsonData = pm.response.json().pagination;",
											"    pm.expect(jsonData.num_pages).to.be.at.least(35000);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mett-current}}/api/genes/?page=1&per_page=10",
									"host": [
										"{{mett-current}}"
									],
									"path": [
										"api",
										"genes",
										""
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "per_page",
											"value": "10"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Genes-by-GeneString-positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Number of pages matches expected value\", function () {",
											"    const jsonData = pm.response.json().pagination;",
											"    pm.expect(jsonData.num_pages).to.be.at.least(5);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mett-current}}/api/genes/search?query=dnaA",
									"host": [
										"{{mett-current}}"
									],
									"path": [
										"api",
										"genes",
										"search"
									],
									"query": [
										{
											"key": "query",
											"value": "dnaA"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Genes-by-GenomeID-Single-postive",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Number of pages matches expected value\", function () {",
											"    const jsonData = pm.response.json().pagination;",
											"    pm.expect(jsonData.num_pages).to.be.at.least(180);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mett-current}}/api/genomes/BU_909/genes",
									"host": [
										"{{mett-current}}"
									],
									"path": [
										"api",
										"genomes",
										"BU_909",
										"genes"
									]
								}
							},
							"response": []
						},
						{
							"name": "Genes-by-GenomeID-Single-negative",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Results array is empty\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.data).to.be.an('array').that.is.empty;",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mett-current}}/api/genomes/ABC_6546/genes",
									"host": [
										"{{mett-current}}"
									],
									"path": [
										"api",
										"genomes",
										"ABC_6546",
										"genes"
									]
								}
							},
							"response": []
						},
						{
							"name": "GeneSort-by-SEQID-GeneString-positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Results array contains exactly one record\", function () {",
											"    const jsonData = pm.response.json(); ",
											"    pm.expect(jsonData.data).to.be.an('array').with.lengthOf(10); ",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mett-current}}/api/genes/search/advanced?query=&per_page=10&sort_field=seq_id&sort_order=asc&isolates=BU_909",
									"host": [
										"{{mett-current}}"
									],
									"path": [
										"api",
										"genes",
										"search",
										"advanced"
									],
									"query": [
										{
											"key": "query",
											"value": ""
										},
										{
											"key": "per_page",
											"value": "10"
										},
										{
											"key": "sort_field",
											"value": "seq_id"
										},
										{
											"key": "sort_order",
											"value": "asc"
										},
										{
											"key": "isolates",
											"value": "BU_909"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Genes-by-IsolateName-Multiple-GeneString-positive-01",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Results array contains exactly 5 records\", function () {",
											"    const jsonData = pm.response.json(); ",
											"    pm.expect(jsonData.data).to.be.an('array').with.lengthOf(5);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mett-current}}/api/genes/search/advanced?isolates=BU_2243B,BU_3537,BU_61,BU_909,BU_ATCC8492&query=dnaA",
									"host": [
										"{{mett-current}}"
									],
									"path": [
										"api",
										"genes",
										"search",
										"advanced"
									],
									"query": [
										{
											"key": "isolates",
											"value": "BU_2243B,BU_3537,BU_61,BU_909,BU_ATCC8492"
										},
										{
											"key": "query",
											"value": "dnaA"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Genes-by-IsolateName-Multiple-GeneString-positive-02",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Number of pages matches expected value\", function () {",
											"    const jsonData = pm.response.json().pagination;",
											"    pm.expect(jsonData.num_pages).to.be.at.least(4);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mett-current}}/api/genes/search/advanced?isolates=BU_2243B,BU_3537,BU_61,BU_909,BU_ATCC8492&query=&filter=pfam:pf13715;essentiality:not_essential",
									"host": [
										"{{mett-current}}"
									],
									"path": [
										"api",
										"genes",
										"search",
										"advanced"
									],
									"query": [
										{
											"key": "isolates",
											"value": "BU_2243B,BU_3537,BU_61,BU_909,BU_ATCC8492"
										},
										{
											"key": "query",
											"value": ""
										},
										{
											"key": "filter",
											"value": "pfam:pf13715;essentiality:not_essential"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Genes-by-IsolateName-Multiple-GeneString-negative",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Number of pages matches expected value\", function () {",
											"    const jsonData = pm.response.json().pagination;",
											"    pm.expect(jsonData.num_pages).to.be.at.least(22000);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mett-current}}/api/genes/search/advanced?isolates=&query=",
									"host": [
										"{{mett-current}}"
									],
									"path": [
										"api",
										"genes",
										"search",
										"advanced"
									],
									"query": [
										{
											"key": "isolates",
											"value": ""
										},
										{
											"key": "query",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Genes-by-Species-IsolateName-Multiple-GeneString-positive-01",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Results array contains exactly 5 records\", function () {",
											"    const jsonData = pm.response.json(); ",
											"    pm.expect(jsonData.data).to.be.an('array').with.lengthOf(5);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mett-current}}/api/genes/search/advanced?species_acronym=bu&isolates=BU_2243B,BU_3537,BU_61,BU_909,BU_ATCC8492&query=dnaA",
									"host": [
										"{{mett-current}}"
									],
									"path": [
										"api",
										"genes",
										"search",
										"advanced"
									],
									"query": [
										{
											"key": "species_acronym",
											"value": "bu"
										},
										{
											"key": "isolates",
											"value": "BU_2243B,BU_3537,BU_61,BU_909,BU_ATCC8492"
										},
										{
											"key": "query",
											"value": "dnaA"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Genes-by-LocusTag-QueryString-Advanced-01",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Results array contains exactly 5 records\", function () {",
											"    const jsonData = pm.response.json(); ",
											"    pm.expect(jsonData.data).to.be.an('array').with.lengthOf(1);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mett-current}}/api/genes/search/advanced?query=BU_2243B_00003&page=1&per_page=10&sort_field=locus_tag&sort_order=asc",
									"host": [
										"{{mett-current}}"
									],
									"path": [
										"api",
										"genes",
										"search",
										"advanced"
									],
									"query": [
										{
											"key": "query",
											"value": "BU_2243B_00003"
										},
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "per_page",
											"value": "10"
										},
										{
											"key": "sort_field",
											"value": "locus_tag"
										},
										{
											"key": "sort_order",
											"value": "asc"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Genes-by-LocusTag-EXACT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Results array contains exactly 5 records\", function () {",
											"    const jsonData = pm.response.json(); ",
											"    pm.expect(jsonData.data).to.be.an('array').with.lengthOf(1);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mett-current}}/api/genes/search/advanced?page=1&per_page=10&sort_field=locus_tag&sort_order=asc&locus_tag=BU_H1-6_01257",
									"host": [
										"{{mett-current}}"
									],
									"path": [
										"api",
										"genes",
										"search",
										"advanced"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "per_page",
											"value": "10"
										},
										{
											"key": "sort_field",
											"value": "locus_tag"
										},
										{
											"key": "sort_order",
											"value": "asc"
										},
										{
											"key": "locus_tag",
											"value": "BU_H1-6_01257"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Genes-by-LocusTag-EXACT Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Results array contains exactly 5 records\", function () {",
											"    const jsonData = pm.response.json(); ",
											"    pm.expect(jsonData.data).to.be.an('array').with.lengthOf(1);",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mett-current}}/api/genes/search/advanced?locus_tag=BU_JCM13286_03494",
									"host": [
										"{{mett-current}}"
									],
									"path": [
										"api",
										"genes",
										"search",
										"advanced"
									],
									"query": [
										{
											"key": "locus_tag",
											"value": "BU_JCM13286_03494"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Genes-by-GENOME_EXACT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Number of pages matches expected value\", function () {",
											"    const jsonData = pm.response.json().pagination;",
											"    pm.expect(jsonData.num_pages).to.be.eq(390);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mett-current}}/api/genes/search/advanced?query=bu_909&page=1&per_page=10&sort_field=locus_tag&sort_order=asc",
									"host": [
										"{{mett-current}}"
									],
									"path": [
										"api",
										"genes",
										"search",
										"advanced"
									],
									"query": [
										{
											"key": "query",
											"value": "bu_909"
										},
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "per_page",
											"value": "10"
										},
										{
											"key": "sort_field",
											"value": "locus_tag"
										},
										{
											"key": "sort_order",
											"value": "asc"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Genes-by-AMY_INFO_FILTER-QueryString-Advanced-02",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Results array contains exactly 5 records\", function () {",
											"    const jsonData = pm.response.json(); ",
											"    pm.expect(jsonData.data).to.be.an('array').with.lengthOf(1);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mett-current}}/api/genes/search/advanced?query=&page=1&per_page=10&sort_field=locus_tag&sort_order=asc&isolates=BU_ATCC8492&filter=has_amr_info%3Atrue",
									"host": [
										"{{mett-current}}"
									],
									"path": [
										"api",
										"genes",
										"search",
										"advanced"
									],
									"query": [
										{
											"key": "query",
											"value": ""
										},
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "per_page",
											"value": "10"
										},
										{
											"key": "sort_field",
											"value": "locus_tag"
										},
										{
											"key": "sort_order",
											"value": "asc"
										},
										{
											"key": "isolates",
											"value": "BU_ATCC8492"
										},
										{
											"key": "filter",
											"value": "has_amr_info%3Atrue"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Genes-by-Species-TypeStrain-GeneString-Essentiality-Positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Number of pages matches expected value\", function () {",
											"    const jsonData = pm.response.json().pagination;",
											"    pm.expect(jsonData.num_pages).to.be.at.least(2);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mett-current}}/api/genes/search/advanced?species_acronym=bu&isolates=BU_ATCC8492&query=dna&filter=essentiality:essential",
									"host": [
										"{{mett-current}}"
									],
									"path": [
										"api",
										"genes",
										"search",
										"advanced"
									],
									"query": [
										{
											"key": "species_acronym",
											"value": "bu"
										},
										{
											"key": "isolates",
											"value": "BU_ATCC8492"
										},
										{
											"key": "query",
											"value": "dna"
										},
										{
											"key": "filter",
											"value": "essentiality:essential"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Genes-by-Species-TypeStrain-GeneString-Essentiality-Negative",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Results array is empty\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.data).to.be.an('array').that.is.empty;",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mett-current}}/api/genes/search/advanced?species_acronym=BU&isolates=BU_909&query=pr&filter=essentiality:essential",
									"host": [
										"{{mett-current}}"
									],
									"path": [
										"api",
										"genes",
										"search",
										"advanced"
									],
									"query": [
										{
											"key": "species_acronym",
											"value": "BU"
										},
										{
											"key": "isolates",
											"value": "BU_909"
										},
										{
											"key": "query",
											"value": "pr"
										},
										{
											"key": "filter",
											"value": "essentiality:essential"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Genes-by-Species-GeneString-positive-01",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Number of pages matches expected value\", function () {",
											"    const jsonData = pm.response.json().pagination;",
											"    pm.expect(jsonData.num_pages).to.be.at.least(50);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mett-current}}/api/genes/search/advanced?species_acronym=BU&query=dna",
									"host": [
										"{{mett-current}}"
									],
									"path": [
										"api",
										"genes",
										"search",
										"advanced"
									],
									"query": [
										{
											"key": "species_acronym",
											"value": "BU"
										},
										{
											"key": "query",
											"value": "dna"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Genes-by-GeneString-filter-positive-01",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Number of pages matches expected value\", function () {",
											"    const jsonData = pm.response.json().pagination;",
											"    pm.expect(jsonData.num_pages).to.be.at.least(100);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mett-current}}/api/genes/search/advanced?query=dna",
									"host": [
										"{{mett-current}}"
									],
									"path": [
										"api",
										"genes",
										"search",
										"advanced"
									],
									"query": [
										{
											"key": "query",
											"value": "dna"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Genes-by-ProteinSequence-01",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Results array contains the protein sequence\", function () {",
											"    const jsonData = pm.response.json().data; ",
											"    jsonData.protein_sequen",
											"    pm.expect(jsonData.protein_sequence).that.is.not.empty;",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mett-current}}/api/genes/protein/BU_2243B_00003",
									"host": [
										"{{mett-current}}"
									],
									"path": [
										"api",
										"genes",
										"protein",
										"BU_2243B_00003"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "metadata",
					"item": [
						{
							"name": "COGCategories",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mett-current}}/api/metadata/cog-categories",
									"host": [
										"{{mett-current}}"
									],
									"path": [
										"api",
										"metadata",
										"cog-categories"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Pyhmmer",
					"item": [
						{
							"name": "Meta-data",
							"item": [
								{
									"name": "databases-list",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{mett-current}}/api/pyhmmer/search/databases",
											"host": [
												"{{mett-current}}"
											],
											"path": [
												"api",
												"pyhmmer",
												"search",
												"databases"
											]
										},
										"description": "Generated from cURL: curl -X POST http://localhost:8000/api/pyhmmer/phmmer \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n        \"query_sequence\": \"MADEUPSEQ\",\n        \"database\": \"custom-db\"\n      }'\n"
									},
									"response": []
								},
								{
									"name": "mxchoices-list",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{mett-current}}/api/pyhmmer/search/mx-choices",
											"host": [
												"{{mett-current}}"
											],
											"path": [
												"api",
												"pyhmmer",
												"search",
												"mx-choices"
											]
										},
										"description": "Generated from cURL: curl -X POST http://localhost:8000/api/pyhmmer/phmmer \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n        \"query_sequence\": \"MADEUPSEQ\",\n        \"database\": \"custom-db\"\n      }'\n"
									},
									"response": []
								}
							]
						},
						{
							"name": "Search",
							"item": [
								{
									"name": "pyhmmer-search-req Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let json = pm.response.json();",
													"if (json.id) {",
													"    pm.globals.set(\"hmmer_job_id\", json.id);",
													"}"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"database\": \"bu_pv_all\",\n    \"threshold\": \"evalue\",\n    \"threshold_value\": 0.01,\n    \"input\": \">Example protein sequence\\nMSEIDHVGLWNRCLEIIRDNVPEQTYKTWFLPIIPLKYEDKTLV\",\n    \"mx\": \"BLOSUM62\",\n    \"E\": 1,\n    \"domE\": 1,\n    \"incE\": 0.01,\n    \"incdomE\": 0.03,\n    \"T\": null,\n    \"domT\": null,\n    \"incT\": null,\n    \"incdomT\": null,\n    \"popen\": 0.02,\n    \"pextend\": 0.4\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{mett-current}}/api/pyhmmer/search",
											"host": [
												"{{mett-current}}"
											],
											"path": [
												"api",
												"pyhmmer",
												"search"
											]
										},
										"description": "Generated from cURL: curl -X POST http://localhost:8000/api/pyhmmer/phmmer \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n        \"query_sequence\": \"MADEUPSEQ\",\n        \"database\": \"custom-db\"\n      }'\n"
									},
									"response": []
								},
								{
									"name": "pyhmmer-search-req",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let json = pm.response.json();",
													"if (json.id) {",
													"    pm.globals.set(\"hmmer_job_id\", json.id);",
													"}"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"database\": \"bu_pv_all\",\n    \"threshold\": \"evalue\",\n    \"threshold_value\": 0.01,\n    \"input\": \">Example protein sequence\\nMSEIDHVGLWNRCLEIIRDNVPEQTYKTWFLPIIPLKYEDKTLV\",\n    \"mx\": \"BLOSUM62\",\n    \"E\": 1,\n    \"domE\": 1,\n    \"incE\": 0.01,\n    \"incdomE\": 0.03,\n    \"T\": null,\n    \"domT\": null,\n    \"incT\": null,\n    \"incdomT\": null,\n    \"popen\": 0.02,\n    \"pextend\": 0.4\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{mett-current}}/api/pyhmmer/search",
											"host": [
												"{{mett-current}}"
											],
											"path": [
												"api",
												"pyhmmer",
												"search"
											]
										},
										"description": "Generated from cURL: curl -X POST http://localhost:8000/api/pyhmmer/phmmer \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n        \"query_sequence\": \"MADEUPSEQ\",\n        \"database\": \"custom-db\"\n      }'\n"
									},
									"response": []
								},
								{
									"name": "pyhmmer-search-varied-seq",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let json = pm.response.json();",
													"if (json.id) {",
													"    pm.globals.set(\"hmmer_job_id\", json.id);",
													"}"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"database\": \"bu_pv_all\",\n    \"threshold\": \"evalue\",\n    \"threshold_value\": 0.01,\n    \"input\": \">Example protein sequence\\nMSEIDHVGLWNRCLEIIRDNVPEQTYKTWFLPIIPLKYEDKTLVKQVP\",\n    \"mx\": \"BLOSUM62\",\n    \"E\": 1,\n    \"domE\": 1,\n    \"incE\": 0.01,\n    \"incdomE\": 0.03,\n    \"T\": null,\n    \"domT\": null,\n    \"incT\": null,\n    \"incdomT\": null,\n    \"popen\": 0.02,\n    \"pextend\": 0.4\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{mett-current}}/api/pyhmmer/search",
											"host": [
												"{{mett-current}}"
											],
											"path": [
												"api",
												"pyhmmer",
												"search"
											]
										},
										"description": "Generated from cURL: curl -X POST http://localhost:8000/api/pyhmmer/phmmer \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n        \"query_sequence\": \"MADEUPSEQ\",\n        \"database\": \"custom-db\"\n      }'\n"
									},
									"response": []
								},
								{
									"name": "pyhmmer-search-long",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let json = pm.response.json();",
													"if (json.id) {",
													"    pm.globals.set(\"hmmer_job_id\", json.id);",
													"}"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"database\": \"bu_all\",\n    \"threshold\": \"evalue\",\n    \"threshold_value\": 0.01,\n    \"input\": \">test_long_sequence\\nMSEIDHVGLWNRCLEIIRDNVPEQTYKTWFLPIIPLKYEDKTLVYQPGKTLEYNVVVDWKSRKTTVDLESTGRTIIKQPGKTLEYNVVVDWKSRKTTVDLESTGRTIIKQPGKTLEYNVVVDWKSRKTTVDLESTGRTIIKQPGKTLEYNVVVDWKSRKTTVDLESTGRTIIKQPGKTLEYNVVVDWKSRKTTVDLESTGRTIIKQPGKTLEYNVVVDWKSRKTTVDLESTGRTIIKQPGKTLEYNVVVDWKSRKTTVDLESTGRTIIKQPGKTLEYNVVVDWKSRKTTVDLESTGRTIIKQPGKTLEYNVVVDWKSRKTTVDLESTGRTIIKQPGKTLEYNVVVDWKSRKTTVDLESTGRTIIKQPGKTLEYNVVVDWKSRKTTVDLESTGRTIIKQPGKTLEYNVVVDWKSRKTTVDLESTGRTIIKQPGKTLEYNVVVDWKSRKTTVDLESTGRTIIKQPGKTLEYNVVVDWKSRKTTVDLESTGRTIIKQPGKTLEYNVVVDWKSRKTTVDLESTGRTIIKQPGKTLEYNVVVDWKSRKTTVDLESTGRTIIKQPGKTLEYNVVVDWKSRKTTVDLESTGRTIIKQPGKTLEYNVVVDWKSRKTTVDLESTGRTIIKQPGKTLEYNVVVDWKSRKTTVDLESTGRTIIKQPGKTLEYNVVVDWKSRKTTVDLESTGRTIIKQPGKTLEYNVVVDWKSRKTTVDLESTGRTIIKQPGKTLEYNVVVDWKSRKTTVDLESTGRTIIKQPGKTLEYNVVVDWKSRKTTVDLESTGRTIIKQPGKTLEYNVVVDWKSRKTTVDLESTGRTIIKQPGKTLEYNVVVDWKSRKTTVDLESTGRTIIKQPGKTLEYNVVVDWKSRKTTVDLESTGRTIIKQPGKTLEYNVVVDWKSRKTTVDLESTGRTIIKQPGKTLEYNVVVDWKSRKTTVDLESTGRTIIKQPGKTLEYNVVVDWKSRKTTVDLESTGRTIIKQPGKTLEYNVVVDWKSRKTTVDLESTGRTIIKQPGKTLEYNVVVDWKSRKTTVDLESTGRTIIKQPGKTLEYNVVVDWKSRKTTVDLESTGRTIIKQPGKTLEYNVVVDWKSRKTTVDLESTGRTIIKQPGKTLEYNVVVDWKSRKTTVDLESTGRTIIKQPGKTLEYNVVVDWKSRKTTVDLESTGRTIIKQPGKTLEYNVVVDWKSRKTTVDLESTGRTIIKER\",\n    \"mx\": \"BLOSUM62\",\n    \"E\": 1,\n    \"domE\": 1,\n    \"incE\": 0.01,\n    \"incdomE\": 0.03,\n    \"T\": null,\n    \"domT\": null,\n    \"incT\": null,\n    \"incdomT\": null,\n    \"popen\": 0.02,\n    \"pextend\": 0.4\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{mett-current}}/api/pyhmmer/search",
											"host": [
												"{{mett-current}}"
											],
											"path": [
												"api",
												"pyhmmer",
												"search"
											]
										},
										"description": "Generated from cURL: curl -X POST http://localhost:8000/api/pyhmmer/phmmer \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n        \"query_sequence\": \"MADEUPSEQ\",\n        \"database\": \"custom-db\"\n      }'\n"
									},
									"response": []
								},
								{
									"name": "pyhmmer-search-invalid",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let json = pm.response.json();",
													"if (json.id) {",
													"    pm.globals.set(\"hmmer_job_id\", json.id);",
													"}"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"database\": \"bu_all\",\n    \"threshold\": \"evalue\",\n    \"threshold_value\": 0.01,\n    \"input\": \"MSEIDHVGLWNRCLEIIRDNVPEQTYKTWFLPIIPLKYEDKTLV\",\n    \"popen\": 0.02,\n    \"pextend\": 0.4\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{mett-current}}/api/pyhmmer/search",
											"host": [
												"{{mett-current}}"
											],
											"path": [
												"api",
												"pyhmmer",
												"search"
											]
										},
										"description": "Generated from cURL: curl -X POST http://localhost:8000/api/pyhmmer/phmmer \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n        \"query_sequence\": \"MADEUPSEQ\",\n        \"database\": \"custom-db\"\n      }'\n"
									},
									"response": []
								},
								{
									"name": "pyhmmer-search-dna",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let json = pm.response.json();",
													"if (json.id) {",
													"    pm.globals.set(\"hmmer_job_id\", json.id);",
													"}"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"database\": \"bu_type_strains\",\n    \"threshold\": \"evalue\",\n    \"threshold_value\": 0.01,\n    \"input\": \">test_dna\\nATGAGTGAAATAGATCATGTCGGGCTGTGGAACCGCTGTCTTGAAATCATCAG\",\n    \"popen\": 0.02,\n    \"pextend\": 0.4\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{mett-current}}/api/pyhmmer/search",
											"host": [
												"{{mett-current}}"
											],
											"path": [
												"api",
												"pyhmmer",
												"search"
											]
										},
										"description": "Generated from cURL: curl -X POST http://localhost:8000/api/pyhmmer/phmmer \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n        \"query_sequence\": \"MADEUPSEQ\",\n        \"database\": \"custom-db\"\n      }'\n"
									},
									"response": []
								},
								{
									"name": "Query-Search-Results",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{mett-current}}/api/pyhmmer/result/{{hmmer_job_id}}",
											"host": [
												"{{mett-current}}"
											],
											"path": [
												"api",
												"pyhmmer",
												"result",
												"{{hmmer_job_id}}"
											]
										},
										"description": "Generated from cURL: curl -X POST http://localhost:8000/api/pyhmmer/phmmer \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n        \"query_sequence\": \"MADEUPSEQ\",\n        \"database\": \"custom-db\"\n      }'\n"
									},
									"response": []
								},
								{
									"name": "download-fasta-debug",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{mett-current}}/api/pyhmmer/result/dfef7a0e-38f0-4568-8e10-5f7333ed2c13/debug-fasta",
											"host": [
												"{{mett-current}}"
											],
											"path": [
												"api",
												"pyhmmer",
												"result",
												"dfef7a0e-38f0-4568-8e10-5f7333ed2c13",
												"debug-fasta"
											]
										},
										"description": "Generated from cURL: curl -X POST http://localhost:8000/api/pyhmmer/phmmer \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n        \"query_sequence\": \"MADEUPSEQ\",\n        \"database\": \"custom-db\"\n      }'\n"
									},
									"response": []
								},
								{
									"name": "debug-aligned-fasta",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{mett-current}}/api/pyhmmer/result/{{hmmer_job_id}}/debug-pyhmmer-msa",
											"host": [
												"{{mett-current}}"
											],
											"path": [
												"api",
												"pyhmmer",
												"result",
												"{{hmmer_job_id}}",
												"debug-pyhmmer-msa"
											]
										},
										"description": "Generated from cURL: curl -X POST http://localhost:8000/api/pyhmmer/phmmer \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n        \"query_sequence\": \"MADEUPSEQ\",\n        \"database\": \"custom-db\"\n      }'\n"
									},
									"response": []
								},
								{
									"name": "Query-Domain-Results",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{mett-current}}/api/pyhmmer/result/{{hmmer_job_id}}/domains?target=BU_CLA-JM-H26-B_04207",
											"host": [
												"{{mett-current}}"
											],
											"path": [
												"api",
												"pyhmmer",
												"result",
												"{{hmmer_job_id}}",
												"domains"
											],
											"query": [
												{
													"key": "target",
													"value": "BU_CLA-JM-H26-B_04207"
												}
											]
										},
										"description": "Generated from cURL: curl -X POST http://localhost:8000/api/pyhmmer/phmmer \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n        \"query_sequence\": \"MADEUPSEQ\",\n        \"database\": \"custom-db\"\n      }'\n"
									},
									"response": []
								},
								{
									"name": "test-Query-Domain",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{mett-current}}/api/pyhmmer/result/851eb6cd-0852-4f63-967b-5130fe7129d6/domains?target=BU_CLA-JM-H26-B_04207",
											"host": [
												"{{mett-current}}"
											],
											"path": [
												"api",
												"pyhmmer",
												"result",
												"851eb6cd-0852-4f63-967b-5130fe7129d6",
												"domains"
											],
											"query": [
												{
													"key": "target",
													"value": "BU_CLA-JM-H26-B_04207"
												}
											]
										},
										"description": "Generated from cURL: curl -X POST http://localhost:8000/api/pyhmmer/phmmer \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n        \"query_sequence\": \"MADEUPSEQ\",\n        \"database\": \"custom-db\"\n      }'\n"
									},
									"response": []
								},
								{
									"name": "test-Search-Results",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{mett-current}}/api/pyhmmer/result/94da93bb-624a-4a3e-a8cb-947ac92390b3",
											"host": [
												"{{mett-current}}"
											],
											"path": [
												"api",
												"pyhmmer",
												"result",
												"94da93bb-624a-4a3e-a8cb-947ac92390b3"
											]
										},
										"description": "Generated from cURL: curl -X POST http://localhost:8000/api/pyhmmer/phmmer \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n        \"query_sequence\": \"MADEUPSEQ\",\n        \"database\": \"custom-db\"\n      }'\n"
									},
									"response": []
								},
								{
									"name": "test-task",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"input\": \">query1\\nMSEQNNTEMTFQIQRIYTKDISFEAPNAPHVFQKDWRAKQ\",\n  \"database\": \"bu_all\",\n  \"threshold\": \"evalue\",\n  \"threshold_value\": 1e-5\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{mett-current}}/api/pyhmmer/testtask",
											"host": [
												"{{mett-current}}"
											],
											"path": [
												"api",
												"pyhmmer",
												"testtask"
											]
										},
										"description": "Generated from cURL: curl -X POST http://localhost:8000/api/pyhmmer/phmmer \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n        \"query_sequence\": \"MADEUPSEQ\",\n        \"database\": \"custom-db\"\n      }'\n"
									},
									"response": []
								},
								{
									"name": "debug-task",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{mett-current}}/api/pyhmmer/debug/task/2a6f5b95-9c43-46a6-ab80-9762b00db8aa",
											"host": [
												"{{mett-current}}"
											],
											"path": [
												"api",
												"pyhmmer",
												"debug",
												"task",
												"2a6f5b95-9c43-46a6-ab80-9762b00db8aa"
											]
										},
										"description": "Generated from cURL: curl -X POST http://localhost:8000/api/pyhmmer/phmmer \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n        \"query_sequence\": \"MADEUPSEQ\",\n        \"database\": \"custom-db\"\n      }'\n"
									},
									"response": []
								}
							]
						},
						{
							"name": "Downloads",
							"item": [
								{
									"name": "Download-TSV",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{mett-current}}/api/pyhmmer/result/{{hmmer_job_id}}/download?format=tab",
											"host": [
												"{{mett-current}}"
											],
											"path": [
												"api",
												"pyhmmer",
												"result",
												"{{hmmer_job_id}}",
												"download"
											],
											"query": [
												{
													"key": "format",
													"value": "tab"
												}
											]
										},
										"description": "Generated from cURL: curl -X POST http://localhost:8000/api/pyhmmer/phmmer \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n        \"query_sequence\": \"MADEUPSEQ\",\n        \"database\": \"custom-db\"\n      }'\n"
									},
									"response": []
								},
								{
									"name": "Download-Fasta",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{mett-current}}/api/pyhmmer/result/{{hmmer_job_id}}/download?format=fasta",
											"host": [
												"{{mett-current}}"
											],
											"path": [
												"api",
												"pyhmmer",
												"result",
												"{{hmmer_job_id}}",
												"download"
											],
											"query": [
												{
													"key": "format",
													"value": "fasta"
												}
											]
										},
										"description": "Generated from cURL: curl -X POST http://localhost:8000/api/pyhmmer/phmmer \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n        \"query_sequence\": \"MADEUPSEQ\",\n        \"database\": \"custom-db\"\n      }'\n"
									},
									"response": []
								},
								{
									"name": "Download-Aligned-Fasta",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{mett-current}}/api/pyhmmer/result/{{hmmer_job_id}}/download?format=aligned_fasta",
											"host": [
												"{{mett-current}}"
											],
											"path": [
												"api",
												"pyhmmer",
												"result",
												"{{hmmer_job_id}}",
												"download"
											],
											"query": [
												{
													"key": "format",
													"value": "aligned_fasta"
												}
											]
										},
										"description": "Generated from cURL: curl -X POST http://localhost:8000/api/pyhmmer/phmmer \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n        \"query_sequence\": \"MADEUPSEQ\",\n        \"database\": \"custom-db\"\n      }'\n"
									},
									"response": []
								},
								{
									"name": "Download-Invalid-Format",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{mett-current}}/api/pyhmmer/result/{{hmmer_job_id}}/download?format=csv",
											"host": [
												"{{mett-current}}"
											],
											"path": [
												"api",
												"pyhmmer",
												"result",
												"{{hmmer_job_id}}",
												"download"
											],
											"query": [
												{
													"key": "format",
													"value": "csv"
												}
											]
										},
										"description": "Generated from cURL: curl -X POST http://localhost:8000/api/pyhmmer/phmmer \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n        \"query_sequence\": \"MADEUPSEQ\",\n        \"database\": \"custom-db\"\n      }'\n"
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Drug",
					"item": [
						{
							"name": "Drug-Data",
							"item": [
								{
									"name": "Drug-Data-BU-By-IsolateName",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{mett-current}}/api/genomes/BU_ATCC8492/drug-data",
											"host": [
												"{{mett-current}}"
											],
											"path": [
												"api",
												"genomes",
												"BU_ATCC8492",
												"drug-data"
											]
										}
									},
									"response": []
								},
								{
									"name": "Drug-Data-PV-By-IsolateName",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{mett-current}}/api/genomes/PV_ATCC8482/drug-data",
											"host": [
												"{{mett-current}}"
											],
											"path": [
												"api",
												"genomes",
												"PV_ATCC8482",
												"drug-data"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "MIC",
							"item": [
								{
									"name": "by-isolate",
									"item": [
										{
											"name": "Drug-MIC-BU-for-Isolate",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript",
														"packages": {},
														"requests": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{mett-current}}/api/genomes/BU_ATCC8492/drug-mic",
													"host": [
														"{{mett-current}}"
													],
													"path": [
														"api",
														"genomes",
														"BU_ATCC8492",
														"drug-mic"
													]
												}
											},
											"response": []
										},
										{
											"name": "Drug-MIC-PV-for-Isolate",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript",
														"packages": {},
														"requests": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{mett-current}}/api/genomes/PV_ATCC8482/drug-mic",
													"host": [
														"{{mett-current}}"
													],
													"path": [
														"api",
														"genomes",
														"PV_ATCC8482",
														"drug-mic"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "by-drug",
									"item": [
										{
											"name": "Drug-MIC-By-Drug-Name",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript",
														"packages": {},
														"requests": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{mett-current}}/api/drugs/mic/by-drug/azithromycin",
													"host": [
														"{{mett-current}}"
													],
													"path": [
														"api",
														"drugs",
														"mic",
														"by-drug",
														"azithromycin"
													]
												}
											},
											"response": []
										},
										{
											"name": "Drug-MIC-By-Drug-Name-Fuzzy",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{mett-current}}/api/drugs/mic/by-drug/actinomycin",
													"host": [
														"{{mett-current}}"
													],
													"path": [
														"api",
														"drugs",
														"mic",
														"by-drug",
														"actinomycin"
													]
												}
											},
											"response": []
										},
										{
											"name": "Drug-MIC-By-Drug-Name&Species",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{mett-current}}/api/drugs/mic/by-drug/azithromycin?species_acronym=BU",
													"host": [
														"{{mett-current}}"
													],
													"path": [
														"api",
														"drugs",
														"mic",
														"by-drug",
														"azithromycin"
													],
													"query": [
														{
															"key": "species_acronym",
															"value": "BU"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Drug-MIC-By-Drug-Name-Paginated",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{mett-current}}/api/drugs/mic/search?drug_name=amoxicillin&species_acronym=BU&page=1&per_page=10",
													"host": [
														"{{mett-current}}"
													],
													"path": [
														"api",
														"drugs",
														"mic",
														"search"
													],
													"query": [
														{
															"key": "drug_name",
															"value": "amoxicillin"
														},
														{
															"key": "species_acronym",
															"value": "BU"
														},
														{
															"key": "page",
															"value": "1"
														},
														{
															"key": "per_page",
															"value": "10"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Drug-MIC-By-Filters-MIC_Values",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{mett-current}}/api/drugs/mic/search?drug_name=amoxicillin&species_acronym=BU&min_mic_value=35.0&max_mic_value=45.0",
													"host": [
														"{{mett-current}}"
													],
													"path": [
														"api",
														"drugs",
														"mic",
														"search"
													],
													"query": [
														{
															"key": "drug_name",
															"value": "amoxicillin"
														},
														{
															"key": "species_acronym",
															"value": "BU"
														},
														{
															"key": "min_mic_value",
															"value": "35.0"
														},
														{
															"key": "max_mic_value",
															"value": "45.0"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Drug-MIC-By-Filters-Higher-MIC_Value",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{mett-current}}/api/drugs/mic/search?drug_name=amoxicillin&species_acronym=BU&min_mic_value=150.0&max_mic_value=160.0",
													"host": [
														"{{mett-current}}"
													],
													"path": [
														"api",
														"drugs",
														"mic",
														"search"
													],
													"query": [
														{
															"key": "drug_name",
															"value": "amoxicillin"
														},
														{
															"key": "species_acronym",
															"value": "BU"
														},
														{
															"key": "min_mic_value",
															"value": "150.0"
														},
														{
															"key": "max_mic_value",
															"value": "160.0"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "by-class",
									"item": [
										{
											"name": "Drug-MIC-By-Drug-Class",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{mett-current}}/api/drugs/mic/by-class/beta_lactam",
													"host": [
														"{{mett-current}}"
													],
													"path": [
														"api",
														"drugs",
														"mic",
														"by-class",
														"beta_lactam"
													]
												}
											},
											"response": []
										},
										{
											"name": "Drug-MIC-By-Drug-Class-Filterby-Species",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{mett-current}}/api/drugs/mic/by-class/beta_lactam?species_acronym=BU",
													"host": [
														"{{mett-current}}"
													],
													"path": [
														"api",
														"drugs",
														"mic",
														"by-class",
														"beta_lactam"
													],
													"query": [
														{
															"key": "species_acronym",
															"value": "BU"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Drug-MIC-By-Drug-Class-Paginated",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{mett-current}}/api/drugs/mic/by-class/beta_lactam?page=1&per_page=5",
													"host": [
														"{{mett-current}}"
													],
													"path": [
														"api",
														"drugs",
														"mic",
														"by-class",
														"beta_lactam"
													],
													"query": [
														{
															"key": "page",
															"value": "1"
														},
														{
															"key": "per_page",
															"value": "5"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Drug-MIC-Filter-Drug-Class&Species",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{mett-current}}/api/drugs/mic/search?drug_class=beta_lactam&species_acronym=BU",
													"host": [
														"{{mett-current}}"
													],
													"path": [
														"api",
														"drugs",
														"mic",
														"search"
													],
													"query": [
														{
															"key": "drug_class",
															"value": "beta_lactam"
														},
														{
															"key": "species_acronym",
															"value": "BU"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Drug-MIC-All",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript",
												"packages": {},
												"requests": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{mett-current}}/api/drugs/mic/search",
											"host": [
												"{{mett-current}}"
											],
											"path": [
												"api",
												"drugs",
												"mic",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "Drug-MIC-By-Query",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{mett-current}}/api/drugs/mic/search?query=azithromycin",
											"host": [
												"{{mett-current}}"
											],
											"path": [
												"api",
												"drugs",
												"mic",
												"search"
											],
											"query": [
												{
													"key": "query",
													"value": "azithromycin"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Drug-MIC-By-Filters-MIC_Values",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{mett-current}}/api/drugs/mic/search?species_acronym=BU&min_mic_value=35.0&max_mic_value=45.0",
											"host": [
												"{{mett-current}}"
											],
											"path": [
												"api",
												"drugs",
												"mic",
												"search"
											],
											"query": [
												{
													"key": "species_acronym",
													"value": "BU"
												},
												{
													"key": "min_mic_value",
													"value": "35.0"
												},
												{
													"key": "max_mic_value",
													"value": "45.0"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Drug-MIC-By-Filters-Higher-MIC_Values",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{mett-current}}/api/drugs/mic/search?species_acronym=BU&min_mic_value=150.0&max_mic_value=160.0",
											"host": [
												"{{mett-current}}"
											],
											"path": [
												"api",
												"drugs",
												"mic",
												"search"
											],
											"query": [
												{
													"key": "species_acronym",
													"value": "BU"
												},
												{
													"key": "min_mic_value",
													"value": "150.0"
												},
												{
													"key": "max_mic_value",
													"value": "160.0"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Drug-MIC-Paginated",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{mett-current}}/api/drugs/mic/search?page=1&per_page=10&sort_by=mic_value&sort_order=asc",
											"host": [
												"{{mett-current}}"
											],
											"path": [
												"api",
												"drugs",
												"mic",
												"search"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "per_page",
													"value": "10"
												},
												{
													"key": "sort_by",
													"value": "mic_value"
												},
												{
													"key": "sort_order",
													"value": "asc"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Drug-high-MIC-values",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{mett-current}}/api/drugs/mic/search?min_mic_value=10.0",
											"host": [
												"{{mett-current}}"
											],
											"path": [
												"api",
												"drugs",
												"mic",
												"search"
											],
											"query": [
												{
													"key": "min_mic_value",
													"value": "10.0"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Drug-low-MIC-values",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{mett-current}}/api/drugs/mic/search?max_mic_value=1.0",
											"host": [
												"{{mett-current}}"
											],
											"path": [
												"api",
												"drugs",
												"mic",
												"search"
											],
											"query": [
												{
													"key": "max_mic_value",
													"value": "1.0"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Metabolism",
							"item": [
								{
									"name": "by-isolate",
									"item": [
										{
											"name": "Drug-Metabolism-BU-By-IsolateName",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{mett-current}}/api/genomes/BU_ATCC8492/drug-metabolism",
													"host": [
														"{{mett-current}}"
													],
													"path": [
														"api",
														"genomes",
														"BU_ATCC8492",
														"drug-metabolism"
													]
												}
											},
											"response": []
										},
										{
											"name": "Drug-Metabolism-PV-By-IsolateName",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{mett-current}}/api/genomes/PV_ATCC8482/drug-metabolism",
													"host": [
														"{{mett-current}}"
													],
													"path": [
														"api",
														"genomes",
														"PV_ATCC8482",
														"drug-metabolism"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "by-class",
									"item": [
										{
											"name": "Drug-Metabolism-Search-by-class",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{mett-current}}/api/drugs/metabolism/search?drug_class=beta_lactam",
													"host": [
														"{{mett-current}}"
													],
													"path": [
														"api",
														"drugs",
														"metabolism",
														"search"
													],
													"query": [
														{
															"key": "drug_class",
															"value": "beta_lactam"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Drug-Metabolism-by-drugClass",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{mett-current}}/api/drugs/metabolism/by-class/beta_lactam",
													"host": [
														"{{mett-current}}"
													],
													"path": [
														"api",
														"drugs",
														"metabolism",
														"by-class",
														"beta_lactam"
													]
												}
											},
											"response": []
										},
										{
											"name": "Drug-Metabolism-by-drugClass&Species",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{mett-current}}/api/drugs/metabolism/by-class/beta_lactam?species_acronym=BU",
													"host": [
														"{{mett-current}}"
													],
													"path": [
														"api",
														"drugs",
														"metabolism",
														"by-class",
														"beta_lactam"
													],
													"query": [
														{
															"key": "species_acronym",
															"value": "BU"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Drug-Metabolism-by-drugClass-Paginated",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{mett-current}}/api/drugs/metabolism/by-class/beta_lactam?page=1&per_page=5",
													"host": [
														"{{mett-current}}"
													],
													"path": [
														"api",
														"drugs",
														"metabolism",
														"by-class",
														"beta_lactam"
													],
													"query": [
														{
															"key": "page",
															"value": "1"
														},
														{
															"key": "per_page",
															"value": "5"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "by-drug",
									"item": [
										{
											"name": "Drug-Metabolism-by-drugName",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{mett-current}}/api/drugs/metabolism/by-drug/amoxapine",
													"host": [
														"{{mett-current}}"
													],
													"path": [
														"api",
														"drugs",
														"metabolism",
														"by-drug",
														"amoxapine"
													]
												}
											},
											"response": []
										},
										{
											"name": "Drug-Metabolism-by-drugName-Fuzzy",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{mett-current}}/api/drugs/metabolism/by-drug/huperzine",
													"host": [
														"{{mett-current}}"
													],
													"path": [
														"api",
														"drugs",
														"metabolism",
														"by-drug",
														"huperzine"
													]
												}
											},
											"response": []
										},
										{
											"name": "Drug-Metabolism-by-drugName&Species",
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{mett-current}}/api/drugs/metabolism/by-drug/amoxapine?species_acronym=BU",
													"host": [
														"{{mett-current}}"
													],
													"path": [
														"api",
														"drugs",
														"metabolism",
														"by-drug",
														"amoxapine"
													],
													"query": [
														{
															"key": "species_acronym",
															"value": "BU"
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Drug-Metabolism-All",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript",
												"packages": {},
												"requests": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{mett-current}}/api/drugs/metabolism/search",
											"host": [
												"{{mett-current}}"
											],
											"path": [
												"api",
												"drugs",
												"metabolism",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "Drug-Metabolism-Search-Name",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{mett-current}}/api/drugs/metabolism/search?query=amoxapine",
											"host": [
												"{{mett-current}}"
											],
											"path": [
												"api",
												"drugs",
												"metabolism",
												"search"
											],
											"query": [
												{
													"key": "query",
													"value": "amoxapine"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Drug-Metabolism-Search-degradation-threshold",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{mett-current}}/api/drugs/metabolism/search?min_degr_percent=50.0&species_acronym=BU",
											"host": [
												"{{mett-current}}"
											],
											"path": [
												"api",
												"drugs",
												"metabolism",
												"search"
											],
											"query": [
												{
													"key": "min_degr_percent",
													"value": "50.0"
												},
												{
													"key": "species_acronym",
													"value": "BU"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Drug-Metabolism-By-SignificantEvents",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{mett-current}}/api/drugs/metabolism/search?is_significant=true&min_degr_percent=75.0",
											"host": [
												"{{mett-current}}"
											],
											"path": [
												"api",
												"drugs",
												"metabolism",
												"search"
											],
											"query": [
												{
													"key": "is_significant",
													"value": "true"
												},
												{
													"key": "min_degr_percent",
													"value": "75.0"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "PPI Interactions",
					"item": [
						{
							"name": "PPI-Available Score Types",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mett-current}}/api/ppi/scores/available",
									"host": [
										"{{mett-current}}"
									],
									"path": [
										"api",
										"ppi",
										"scores",
										"available"
									]
								}
							},
							"response": []
						},
						{
							"name": "PPI-Interactions - PV Species - Paginated",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mett-current}}/api/ppi/interactions?species_acronym=PV&page=1&per_page=10",
									"host": [
										"{{mett-current}}"
									],
									"path": [
										"api",
										"ppi",
										"interactions"
									],
									"query": [
										{
											"key": "species_acronym",
											"value": "PV"
										},
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "per_page",
											"value": "10"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PPI-Interactions -  BU_ATCC8492_01788",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mett-current}}/api/ppi/interactions?locus_tag=BU_ATCC8492_01788&species_acronym=BU&per_page=5",
									"host": [
										"{{mett-current}}"
									],
									"path": [
										"api",
										"ppi",
										"interactions"
									],
									"query": [
										{
											"key": "locus_tag",
											"value": "BU_ATCC8492_01788"
										},
										{
											"key": "species_acronym",
											"value": "BU"
										},
										{
											"key": "per_page",
											"value": "5"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PPI-Interactions with score Filters -  BU_ATCC8492_01788",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mett-current}}/api/ppi/interactions?locus_tag=BU_ATCC8492_01788&species_acronym=BU&score_type=ds_score&score_threshold=0.1&per_page=3",
									"host": [
										"{{mett-current}}"
									],
									"path": [
										"api",
										"ppi",
										"interactions"
									],
									"query": [
										{
											"key": "locus_tag",
											"value": "BU_ATCC8492_01788"
										},
										{
											"key": "species_acronym",
											"value": "BU"
										},
										{
											"key": "score_type",
											"value": "ds_score"
										},
										{
											"key": "score_threshold",
											"value": "0.1"
										},
										{
											"key": "per_page",
											"value": "3"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PPI-Interactions - A6KXK8",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mett-current}}/api/ppi/interactions?protein_id=A6KXK8&species_acronym=PV",
									"host": [
										"{{mett-current}}"
									],
									"path": [
										"api",
										"ppi",
										"interactions"
									],
									"query": [
										{
											"key": "protein_id",
											"value": "A6KXK8"
										},
										{
											"key": "species_acronym",
											"value": "PV"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PPI-Interactions - BU_ATCC8492_01788",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mett-current}}/api/ppi/interactions?locus_tag=BU_ATCC8492_01788&species_acronym=BU",
									"host": [
										"{{mett-current}}"
									],
									"path": [
										"api",
										"ppi",
										"interactions"
									],
									"query": [
										{
											"key": "locus_tag",
											"value": "BU_ATCC8492_01788"
										},
										{
											"key": "species_acronym",
											"value": "BU"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PPI-Interactions - BU_ATCC8492_02176",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mett-current}}/api/ppi/interactions?locus_tag=BU_ATCC8492_02176",
									"host": [
										"{{mett-current}}"
									],
									"path": [
										"api",
										"ppi",
										"interactions"
									],
									"query": [
										{
											"key": "locus_tag",
											"value": "BU_ATCC8492_02176"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PPI-Interactions - Neighbors - A6KXK8",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mett-current}}/api/ppi/neighbors?protein_id=A6KXK8&n=5&species_acronym=PV",
									"host": [
										"{{mett-current}}"
									],
									"path": [
										"api",
										"ppi",
										"neighbors"
									],
									"query": [
										{
											"key": "protein_id",
											"value": "A6KXK8"
										},
										{
											"key": "n",
											"value": "5"
										},
										{
											"key": "species_acronym",
											"value": "PV"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PPI-Interactions - Neighbors - BU_ATCC8492_01788",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mett-current}}/api/ppi/neighbors?locus_tag=BU_ATCC8492_01788&species_acronym=BU",
									"host": [
										"{{mett-current}}"
									],
									"path": [
										"api",
										"ppi",
										"neighbors"
									],
									"query": [
										{
											"key": "locus_tag",
											"value": "BU_ATCC8492_01788"
										},
										{
											"key": "species_acronym",
											"value": "BU"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PPI-Interactions - Neighborhood - A6KXK8",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mett-current}}/api/ppi/neighborhood?protein_id=A6KXK8&species_acronym=PV&n=5",
									"host": [
										"{{mett-current}}"
									],
									"path": [
										"api",
										"ppi",
										"neighborhood"
									],
									"query": [
										{
											"key": "protein_id",
											"value": "A6KXK8"
										},
										{
											"key": "species_acronym",
											"value": "PV"
										},
										{
											"key": "n",
											"value": "5"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PPI-Interactions - Neighborhood - BU_ATCC8492_01788",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mett-current}}/api/ppi/neighborhood?locus_tag=BU_ATCC8492_01788&species_acronym=BU&n=3",
									"host": [
										"{{mett-current}}"
									],
									"path": [
										"api",
										"ppi",
										"neighborhood"
									],
									"query": [
										{
											"key": "locus_tag",
											"value": "BU_ATCC8492_01788"
										},
										{
											"key": "species_acronym",
											"value": "BU"
										},
										{
											"key": "n",
											"value": "3"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PPI-Interactions - Neighborhood - A6L7C0",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mett-current}}/api/ppi/interactions?protein_id=A6L7C0&species_acronym=PV&per_page=10000",
									"host": [
										"{{mett-current}}"
									],
									"path": [
										"api",
										"ppi",
										"interactions"
									],
									"query": [
										{
											"key": "protein_id",
											"value": "A6L7C0"
										},
										{
											"key": "species_acronym",
											"value": "PV"
										},
										{
											"key": "per_page",
											"value": "10000"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PPI-Interactions - DS score",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mett-current}}/api/ppi/interactions?species_acronym=BU&score_type=ds_score&score_threshold=0.8&per_page=10",
									"host": [
										"{{mett-current}}"
									],
									"path": [
										"api",
										"ppi",
										"interactions"
									],
									"query": [
										{
											"key": "species_acronym",
											"value": "BU"
										},
										{
											"key": "score_type",
											"value": "ds_score"
										},
										{
											"key": "score_threshold",
											"value": "0.8"
										},
										{
											"key": "per_page",
											"value": "10"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PPI-Interactions - Melt Score",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mett-current}}/api/ppi/interactions?species_acronym=PV&score_type=melt_score&score_threshold=0.9",
									"host": [
										"{{mett-current}}"
									],
									"path": [
										"api",
										"ppi",
										"interactions"
									],
									"query": [
										{
											"key": "species_acronym",
											"value": "PV"
										},
										{
											"key": "score_type",
											"value": "melt_score"
										},
										{
											"key": "score_threshold",
											"value": "0.9"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PPI-Interactions - Abundance Score",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mett-current}}/api/ppi/network-properties?score_type=abundance_score&score_threshold=0.95&species_acronym=PV",
									"host": [
										"{{mett-current}}"
									],
									"path": [
										"api",
										"ppi",
										"network-properties"
									],
									"query": [
										{
											"key": "score_type",
											"value": "abundance_score"
										},
										{
											"key": "score_threshold",
											"value": "0.95"
										},
										{
											"key": "species_acronym",
											"value": "PV"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PPI-Interactions - XLMS Peptides",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mett-current}}/api/ppi/network-properties?score_type=xlms_peptides&score_threshold=2&species_acronym=PV",
									"host": [
										"{{mett-current}}"
									],
									"path": [
										"api",
										"ppi",
										"network-properties"
									],
									"query": [
										{
											"key": "score_type",
											"value": "xlms_peptides"
										},
										{
											"key": "score_threshold",
											"value": "2"
										},
										{
											"key": "species_acronym",
											"value": "PV"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PPI-Interactions - String Score",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mett-current}}/api/ppi/interactions?species_acronym=PV&score_type=string_score&score_threshold=0.7&per_page=5",
									"host": [
										"{{mett-current}}"
									],
									"path": [
										"api",
										"ppi",
										"interactions"
									],
									"query": [
										{
											"key": "species_acronym",
											"value": "PV"
										},
										{
											"key": "score_type",
											"value": "string_score"
										},
										{
											"key": "score_threshold",
											"value": "0.7"
										},
										{
											"key": "per_page",
											"value": "5"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PPI-Interactions - XL-MS evidence",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mett-current}}/api/ppi/interactions?species_acronym=PV&has_xlms=true&per_page=5",
									"host": [
										"{{mett-current}}"
									],
									"path": [
										"api",
										"ppi",
										"interactions"
									],
									"query": [
										{
											"key": "species_acronym",
											"value": "PV"
										},
										{
											"key": "has_xlms",
											"value": "true"
										},
										{
											"key": "per_page",
											"value": "5"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PPI-Interactions - STRING evidence",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mett-current}}/api/ppi/interactions?species_acronym=PV&has_string=true&per_page=5",
									"host": [
										"{{mett-current}}"
									],
									"path": [
										"api",
										"ppi",
										"interactions"
									],
									"query": [
										{
											"key": "species_acronym",
											"value": "PV"
										},
										{
											"key": "has_string",
											"value": "true"
										},
										{
											"key": "per_page",
											"value": "5"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PPI-Interactions - Network properties",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mett-current}}/api/ppi/network-properties?score_type=ds_score&score_threshold=0.8&species_acronym=PV",
									"host": [
										"{{mett-current}}"
									],
									"path": [
										"api",
										"ppi",
										"network-properties"
									],
									"query": [
										{
											"key": "score_type",
											"value": "ds_score"
										},
										{
											"key": "score_threshold",
											"value": "0.8"
										},
										{
											"key": "species_acronym",
											"value": "PV"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "PPI-Interactions - Network data",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mett-current}}/api/ppi/network/ds_score?score_threshold=0.8&species_acronym=PV&include_properties=true",
									"host": [
										"{{mett-current}}"
									],
									"path": [
										"api",
										"ppi",
										"network",
										"ds_score"
									],
									"query": [
										{
											"key": "score_threshold",
											"value": "0.8"
										},
										{
											"key": "species_acronym",
											"value": "PV"
										},
										{
											"key": "include_properties",
											"value": "true"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Pooled_TTP",
					"item": [
						{
							"name": "TTP - Meta",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mett-current}}/api/ttp/metadata",
									"host": [
										"{{mett-current}}"
									],
									"path": [
										"api",
										"ttp",
										"metadata"
									]
								}
							},
							"response": []
						},
						{
							"name": "TTP - Search based on Strain",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mett-current}}/api/ttp/search?query=BU_ATCC8492",
									"host": [
										"{{mett-current}}"
									],
									"path": [
										"api",
										"ttp",
										"search"
									],
									"query": [
										{
											"key": "query",
											"value": "BU_ATCC8492"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "TTP - Search based on Compound",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mett-current}}/api/ttp/search?query=myo-inositol",
									"host": [
										"{{mett-current}}"
									],
									"path": [
										"api",
										"ttp",
										"search"
									],
									"query": [
										{
											"key": "query",
											"value": "myo-inositol"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "TTP - gene interactions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mett-current}}/api/ttp/gene/PV_ATCC8482_00051/interactions",
									"host": [
										"{{mett-current}}"
									],
									"path": [
										"api",
										"ttp",
										"gene",
										"PV_ATCC8482_00051",
										"interactions"
									]
								}
							},
							"response": []
						},
						{
							"name": "TTP - gene interactions with Hit Call True",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mett-current}}/api/ttp/gene/PV_ATCC8482_00051/interactions?hit_calling=true",
									"host": [
										"{{mett-current}}"
									],
									"path": [
										"api",
										"ttp",
										"gene",
										"PV_ATCC8482_00051",
										"interactions"
									],
									"query": [
										{
											"key": "hit_calling",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "TTP - Compound Interactions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mett-current}}/api/ttp/compound/myo-inositol/interactions",
									"host": [
										"{{mett-current}}"
									],
									"path": [
										"api",
										"ttp",
										"compound",
										"myo-inositol",
										"interactions"
									]
								}
							},
							"response": []
						},
						{
							"name": "TTP - Analyze specific pools",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mett-current}}/api/ttp/pools/analysis?poolA=pool1&poolB=pool8",
									"host": [
										"{{mett-current}}"
									],
									"path": [
										"api",
										"ttp",
										"pools",
										"analysis"
									],
									"query": [
										{
											"key": "poolA",
											"value": "pool1"
										},
										{
											"key": "poolB",
											"value": "pool8"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "TTP - Analyze specific pools 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mett-current}}/api/ttp/pools/analysis?poolA=pool3&poolB=pool10",
									"host": [
										"{{mett-current}}"
									],
									"path": [
										"api",
										"ttp",
										"pools",
										"analysis"
									],
									"query": [
										{
											"key": "poolA",
											"value": "pool3"
										},
										{
											"key": "poolB",
											"value": "pool10"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "TTP - significant interactions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mett-current}}/api/ttp/hits?max_fdr=0.05&min_ttp_score=1.0",
									"host": [
										"{{mett-current}}"
									],
									"path": [
										"api",
										"ttp",
										"hits"
									],
									"query": [
										{
											"key": "max_fdr",
											"value": "0.05"
										},
										{
											"key": "min_ttp_score",
											"value": "1.0"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Proteomics",
					"item": [
						{
							"name": "Proteomics - By Locus tag",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mett-current}}/api/genes/BU_ATCC8492_00002/proteomics",
									"host": [
										"{{mett-current}}"
									],
									"path": [
										"api",
										"genes",
										"BU_ATCC8492_00002",
										"proteomics"
									]
								}
							},
							"response": []
						},
						{
							"name": "Proteomics - By Locus tag - Negative",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mett-current}}/api/genes/PV_ATCC8482_02186/proteomics",
									"host": [
										"{{mett-current}}"
									],
									"path": [
										"api",
										"genes",
										"PV_ATCC8482_02186",
										"proteomics"
									]
								}
							},
							"response": []
						},
						{
							"name": "Proteomics - Search",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mett-current}}/api/proteomics/search?locus_tags=BU_ATCC8492_00002&uniprot_ids=A7V2F0,A6L272",
									"host": [
										"{{mett-current}}"
									],
									"path": [
										"api",
										"proteomics",
										"search"
									],
									"query": [
										{
											"key": "locus_tags",
											"value": "BU_ATCC8492_00002"
										},
										{
											"key": "uniprot_ids",
											"value": "A7V2F0,A6L272"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Proteomics - Search with Quality",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mett-current}}/api/proteomics/search?locus_tags=BU_ATCC8492_00002&uniprot_ids=A7V2F0,A6L272&min_coverage=50&min_unique_peptides=10&has_evidence=true",
									"host": [
										"{{mett-current}}"
									],
									"path": [
										"api",
										"proteomics",
										"search"
									],
									"query": [
										{
											"key": "locus_tags",
											"value": "BU_ATCC8492_00002"
										},
										{
											"key": "uniprot_ids",
											"value": "A7V2F0,A6L272"
										},
										{
											"key": "min_coverage",
											"value": "50"
										},
										{
											"key": "min_unique_peptides",
											"value": "10"
										},
										{
											"key": "has_evidence",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Proteomics - Search with Quality Only",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{mett-current}}/api/proteomics/search?min_coverage=75&min_unique_peptides=15&has_evidence=true",
									"host": [
										"{{mett-current}}"
									],
									"path": [
										"api",
										"proteomics",
										"search"
									],
									"query": [
										{
											"key": "min_coverage",
											"value": "75"
										},
										{
											"key": "min_unique_peptides",
											"value": "15"
										},
										{
											"key": "has_evidence",
											"value": "true"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "POC",
			"item": [
				{
					"name": "Deepseek",
					"item": [
						{
							"name": "basic-request",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"prompt\": \"Return ONLY valid JSON without any markdown or explanation.\\n\\nQuery: Show essential genes in PV involved in AMR\\n\\nFormat:\\n{\\n  \\\"species\\\": \\\"<species acronym or name>\\\",\\n  \\\"essentiality\\\": \\\"<essential/non-essential>\\\",\\n  \\\"amr\\\": <true/false>\\n}\",\n    \"n_predict\": 300,\n    \"temperature\": 0.1\n  }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/completion",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"completion"
									]
								},
								"description": "Generated from cURL: curl -X POST http://localhost:8080/completion \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"prompt\": \"What is Bacteroides uniformis?\",\n    \"n_predict\": 50,\n    \"temperature\": 0.2\n  }'"
							},
							"response": []
						}
					]
				},
				{
					"name": "NaturalSearchQuery",
					"item": [
						{
							"name": "simple-query",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/plain, */*"
									},
									{
										"key": "Accept-Language",
										"value": "en-GB,en;q=0.9"
									},
									{
										"key": "Cache-Control",
										"value": "no-cache"
									},
									{
										"key": "Connection",
										"value": "keep-alive"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Origin",
										"value": "http://localhost:3000"
									},
									{
										"key": "Pragma",
										"value": "no-cache"
									},
									{
										"key": "Referer",
										"value": "http://localhost:3000/natural-query"
									},
									{
										"key": "Sec-Fetch-Dest",
										"value": "empty"
									},
									{
										"key": "Sec-Fetch-Mode",
										"value": "cors"
									},
									{
										"key": "Sec-Fetch-Site",
										"value": "same-origin"
									},
									{
										"key": "User-Agent",
										"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/136.0.0.0 Safari/537.36"
									},
									{
										"key": "sec-ch-ua",
										"value": "\"Chromium\";v=\"136\", \"Google Chrome\";v=\"136\", \"Not.A/Brand\";v=\"99\""
									},
									{
										"key": "sec-ch-ua-mobile",
										"value": "?0"
									},
									{
										"key": "sec-ch-ua-platform",
										"value": "\"macOS\""
									},
									{
										"key": "Cookie",
										"value": "csrftoken=nmo9n6vCxtn6hRlS95Cg0KzKt6KKgiUH"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "Show essential genes in PV involved in AMR",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{mett-current}}/api/query/interpret",
									"host": [
										"{{mett-current}}"
									],
									"path": [
										"api",
										"query",
										"interpret"
									]
								},
								"description": "Generated from cURL: curl 'http://localhost:3000/api/query/interpret' \\\n  -H 'Accept: application/json, text/plain, */*' \\\n  -H 'Accept-Language: en-GB,en;q=0.9' \\\n  -H 'Cache-Control: no-cache' \\\n  -H 'Connection: keep-alive' \\\n  -H 'Content-Type: application/json' \\\n  -b 'csrftoken=nmo9n6vCxtn6hRlS95Cg0KzKt6KKgiUH' \\\n  -H 'Origin: http://localhost:3000' \\\n  -H 'Pragma: no-cache' \\\n  -H 'Referer: http://localhost:3000/natural-query' \\\n  -H 'Sec-Fetch-Dest: empty' \\\n  -H 'Sec-Fetch-Mode: cors' \\\n  -H 'Sec-Fetch-Site: same-origin' \\\n  -H 'User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/136.0.0.0 Safari/537.36' \\\n  -H 'sec-ch-ua: \"Chromium\";v=\"136\", \"Google Chrome\";v=\"136\", \"Not.A/Brand\";v=\"99\"' \\\n  -H 'sec-ch-ua-mobile: ?0' \\\n  -H 'sec-ch-ua-platform: \"macOS\"' \\\n  --data-raw '{\"query\":\"Show essential genes in PV involved in AMR\"}'"
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Pyhmmer-Management-Requests",
			"item": [
				{
					"name": "Tasks-Status",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{mett-current}}/api/pyhmmer/search/tasks-status?threshold_days=1",
							"host": [
								"{{mett-current}}"
							],
							"path": [
								"api",
								"pyhmmer",
								"search",
								"tasks-status"
							],
							"query": [
								{
									"key": "threshold_days",
									"value": "1"
								}
							]
						},
						"description": "Generated from cURL: curl -X POST http://localhost:8000/api/pyhmmer/phmmer \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n        \"query_sequence\": \"MADEUPSEQ\",\n        \"database\": \"custom-db\"\n      }'\n"
					},
					"response": []
				},
				{
					"name": "Cleanup-Old-Tasks",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{mett-current}}/api/pyhmmer/search/cleanup-tasks?threshold_days=1",
							"host": [
								"{{mett-current}}"
							],
							"path": [
								"api",
								"pyhmmer",
								"search",
								"cleanup-tasks"
							],
							"query": [
								{
									"key": "threshold_days",
									"value": "1"
								}
							]
						},
						"description": "Generated from cURL: curl -X POST http://localhost:8000/api/pyhmmer/phmmer \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n        \"query_sequence\": \"MADEUPSEQ\",\n        \"database\": \"custom-db\"\n      }'\n"
					},
					"response": []
				}
			]
		}
	]
}